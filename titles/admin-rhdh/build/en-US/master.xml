<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc?><?asciidoc-numbered?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Administration guide for Red Hat Developer Hub</title><subtitle>
</subtitle>

<date>2024-03-15</date>
<productname>Red Hat Developer Hub</productname>
<productnumber>1.0</productnumber>
<abstract>
    <para>Red Hat Developer Hub is a developer platform for building developer portals. This document provides an overview of Red Hat Developer Hub and explains how to install the product.</para>
</abstract>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Author_Group.xml"/>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Common_Content/Legal_Notice.xml"/>
</info>
<preface>
<title>Preface</title>
<simpara>The Red Hat Developer Hub is an enterprise-grade, open developer platform that is used for building developer portals. This platform contains a supported and opinionated framework that helps reduce the friction and frustration of developers while boosting their productivity.</simpara>
</preface>
<preface xml:id="snip-customer-support-info_admin-rhdh">
<title>Red Hat Developer Hub support</title>
<simpara>If you experience difficulty with a procedure described in this documentation, visit the Red Hat Customer Portal at <link xlink:href="http://access.redhat.com">http://access.redhat.com</link>. You can use the Red Hat Customer Portal to search or browse through the Red Hat Knowledgebase of technical support articles about Red Hat products. You can also create a <link xlink:href="https://access.redhat.com/support/cases/#/case/new/get-support?caseCreate=true">support case</link> for Red Hat Global Support Services (GSS). Please select "Red Hat Developer Hub" as the product and select the appropriate product version.</simpara>
</preface>
<chapter xml:id="con-rhdh-overview_admin-rhdh">
<title>Overview of Red Hat Developer Hub</title>
<simpara>Red Hat Developer Hub (Developer Hub) serves as an open developer platform designed for building developer portals. Using Developer Hub, the engineering teams can access a unified platform that streamlines the development process and provides a variety of tools and resources to build high-quality software efficiently.</simpara>
<simpara>The goal of Developer Hub is to address the difficulties associated with creating and sustaining developer portals using:</simpara>
<itemizedlist>
<listitem>
<simpara>A centralized dashboard to view all available developer tools and resources to increase productivity</simpara>
</listitem>
<listitem>
<simpara>Self-service capabilities, along with guardrails, for cloud-native application development that complies with enterprise-class best practices</simpara>
</listitem>
<listitem>
<simpara>Proper security and governance for all developers across the enterprise</simpara>
</listitem>
</itemizedlist>
<simpara>The Red Hat Developer Hub simplifies decision-making by providing a developer experience that presents a selection of internally approved tools, programming languages, and various developer resources within a self-managed portal. This approach contributes to the acceleration of application development and the maintenance of code quality, all while fostering innovation.</simpara>
</chapter>
<chapter xml:id="proc-install-rhdh-helm_admin-rhdh">
<title>Installing Red Hat Developer Hub using Helm Chart</title>
<simpara>You can use a Helm Chart in Red Hat OpenShift (OpenShift) to install Red Hat Developer Hub, which is a flexible installation method.</simpara>
<simpara>Helm is a package manager on OpenShift that provides the following features:</simpara>
<itemizedlist>
<listitem>
<simpara>Applies regular application updates using custom hooks</simpara>
</listitem>
<listitem>
<simpara>Manages the installation of complex applications</simpara>
</listitem>
<listitem>
<simpara>Provides charts that you can host on public and private servers</simpara>
</listitem>
<listitem>
<simpara>Supports rolling back to previous application versions</simpara>
</listitem>
</itemizedlist>
<simpara>The Red Hat Developer Hub Helm Chart is available in the Helm catalog in Red Hat OpenShift Dedicated and OpenShift Container Platform (OCP).</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You are logged in to the OCP using the OpenShift web console.</simpara>
</listitem>
<listitem>
<simpara>You have configured the appropriate roles and permissions within your project to create an application.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a project in the OpenShift, if not present.</simpara>
<simpara>For more information about creating a project in OpenShift, see link: <link xlink:href="https://docs.openshift.com/container-platform/3.11/dev_guide/projects.html#create-a-project">Red Hat OpenShift documentation</link>.</simpara>
</listitem>
<listitem>
<simpara>Switch to <emphasis role="strong">Developer</emphasis> perspective on your Red Hat OpenShift web console.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">+Add</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>From the <emphasis role="strong">Developer Catalog</emphasis> panel, click <emphasis role="strong">Helm Chart</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Search for <emphasis>Developer Hub</emphasis> in the search bar and select the <emphasis role="strong">Red Hat Developer Hub</emphasis> card.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Copy the OpenShift router host (for example: <literal>apps.&lt;clusterName&gt;.com</literal>) to <emphasis role="strong">Root Schema</emphasis> → <emphasis role="strong">global</emphasis> → <emphasis role="strong">Shorthand for users who do not want to specify a custom HOSTNAME. Used ONLY with the DEFAULT upstream.backstage.appConfig value and with OCP Route enabled.</emphasis>, and adjust the other values if needed.</simpara>
</listitem>
<listitem>
<simpara>Alternatively, copy the OpenShift router host (for example: <literal>apps.&lt;clusterName&gt;.com</literal>) to <literal>global.clusterRouterBase</literal>, and adjust other values if needed, such as <literal>global.clusterRouterBase: apps.example.com</literal>.</simpara>
<simpara>In the previous steps, the information about the host is copied, which is accessed by the Developer Hub backend.</simpara>
<simpara>When an OCP route is generated automatically, the host value for the route is inferred and the same host information is sent to the Developer Hub. Also, if the Developer Hub is present on a custom domain by setting the host manually using values, the custom host takes precedence.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create</emphasis> and wait for the database and Red Hat Developer Hub to start.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Open URL</emphasis> option to start using the Red Hat Developer Hub platform.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh/rhdh-helm-install.png"/>
</imageobject>
<textobject><phrase>rhdh helm install</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
</orderedlist>
<note>
<simpara>If your <literal>developer-hub</literal> pod is stuck in a <literal>CrashLoopBackOff</literal> and you see the following logs:</simpara>
<programlisting language="log" linenumbering="unnumbered">Loaded config from app-config-from-configmap.yaml, env
...
2023-07-24T19:44:46.223Z auth info Configuring "database" as KeyStore provider type=plugin
Backend failed to start up Error: Missing required config value at 'backend.database.client'</programlisting>
<simpara>Then, verify the configuration files. This is because the configuration files are not being accessed by the RHDH container.</simpara>
</note>
<section xml:id="proc-install-rhdh-airgapped-environment_admin-rhdh">
<title>Installing Red Hat Developer Hub in an air-gapped environment</title>
<simpara>An air-gapped environment, also known as an air-gapped network or isolated network, ensures security by physically segregating the system or network. This isolation is established to prevent unauthorized access, data transfer, or communication between the air-gapped system and external sources.</simpara>
<simpara>You can install the Red Hat Developer Hub in an air-gapped environment to ensure security and meet specific regulatory requirements.</simpara>
<simpara>To install the Developer Hub in an air-gapped environment, you must have access to the <literal>registry.redhat.io</literal> and the registry for the air-gapped environment.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have installed an Openshift Container Platform (OCP) 4.10 or later.</simpara>
</listitem>
<listitem>
<simpara>You have access to the <literal>registry.redhat.io</literal>.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift image registry of your cluster. For more information about exposing the OpenShift image registry, see <link xlink:href="https://docs.openshift.com/container-platform/4.14/registry/securing-exposing-registry.html">Exposing the registry</link> in OpenShift documentation.</simpara>
</listitem>
<listitem>
<simpara>You have installed the <literal>oc</literal> command line tool on your workstation.</simpara>
</listitem>
<listitem>
<simpara>You have installed the <literal>podman</literal> command line tools on your workstation.</simpara>
</listitem>
<listitem>
<simpara>You you have an account in <link xlink:href="https://developers.redhat.com/">Red Hat Developer</link> portal.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Log in to the OCP using <literal>oc</literal>:</simpara>
<screen>oc login -u &lt;user&gt; -p &lt;password&gt; https://api.&lt;HOSTNAME&gt;:6443</screen>
</listitem>
<listitem>
<simpara>Log in to the OCP image registry using <literal>podman</literal>:</simpara>
<screen>podman login -u kubeadmin -p $(oc whoami -t) default-route-openshift-image-registry.&lt;HOSTNAME&gt;</screen>
<note>
<simpara>You can use the following commands to get the full host name of the OpenShift image registry and than use the host name in a command to log in:</simpara>
<screen>REGISTRY_HOST=$(oc get route default-route -n openshift-image-registry --template='{{ .spec.host }}')

podman login -u kubeadmin -p $(oc whoami -t) $REGISTRY_HOST</screen>
</note>
</listitem>
<listitem>
<simpara>Log in to the <literal>registry.redhat.io</literal> in <literal>podman</literal> using the following command:</simpara>
<screen>podman login registry.redhat.io</screen>
<simpara>For more information about registry authentication, see <link xlink:href="https://access.redhat.com/RegistryAuthentication">Red Hat Container Registry Authentication</link>.</simpara>
</listitem>
<listitem>
<simpara>Pull Developer Hub and PostgreSQL images from <link xlink:href="https://catalog.redhat.com/software/containers/search">Red Hat Image registry</link> to your workstation:</simpara>
<screen>podman pull &lt;DEVELOPERHUBIMAGE&gt;
podman pull registry.redhat.io/rhel9/postgresql-15:latest</screen>
</listitem>
<listitem>
<simpara>Push both images to the internal OCP registry.</simpara>
<simpara>For more information about pushing images directly to OCP registry, see <link xlink:href="https://access.redhat.com/solutions/6959306">How do I push an Image directly into the OpenShift 4 registry</link>.</simpara>
<screen>podman push --remove-signatures registry.redhat.io/rhel9/postgresql-15:latest default-route-openshift-image-registry.&lt;hostname&gt;/&lt;yourProject&gt;/postgresql-15:latest</screen>
<tip>
<simpara>If an x509 error occurs, ensure you install the CA certificate used for OpenShift routes on your system.</simpara>
<simpara>Optionally, you can append <literal>--tls-verify=false</literal> to the <literal>podman</literal> push command, note that this approach is not recommended.</simpara>
</tip>
</listitem>
<listitem>
<simpara>Use the following command to verify that both images are present in the internal OCP registry:</simpara>
<screen>oc get imagestream -n &lt;projectName&gt;</screen>
</listitem>
<listitem>
<simpara>Enable local image lookup for both images using the following commands:</simpara>
<screen>oc set image-lookup postgresql-15
oc set image-lookup  rhdh-hub-rhel9</screen>
</listitem>
<listitem>
<simpara>Go to <emphasis role="strong">YAML view</emphasis> and update the <literal>image</literal> section for <literal>backstage</literal> and <literal>postgresql</literal> using the following values:</simpara>
<formalpara>
<title>Example values for Developer Hub image</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">upstream:
  backstage:
    image:
      registry: ""
      repository: rhdh-hub-rhel9
      tag: latest</programlisting>
</para>
</formalpara>
<formalpara>
<title>Example values for PostgreSQL image</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">upstream:
  postgresql:
    image:
      registry: ""
      repository: postgresql-15
      tag: latest</programlisting>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Install the Red Hat Developer Hub using Helm Chart. For more information about installing Developer Hub, see <xref linkend="proc-install-rhdh-helm_admin-rhdh"/>.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="proc-install-rhdh-operator_admin-rhdh">
<title>Installing Red Hat Developer Hub using the Operator</title>
<section xml:id="as-an-administrator" remap="_as-an-administrator">
<title>As an administrator</title>
<important>
<simpara>The Red Hat Developer Hub Operator is a Technology Preview feature only.</simpara>
<simpara>Technology Preview features are not supported with Red Hat production service level agreements (SLAs), might not be functionally complete, and Red Hat does not recommend using them for production. These previews provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.</simpara>
<simpara>For more information on Red Hat Technology Preview features, see <link xlink:href="https://access.redhat.com/support/offerings/techpreview/">Technology Preview Features Scope</link>.</simpara>
</important>
<simpara>As an administrator, you can install Red Hat Developer Hub on your OpenShift Container Platform using the Operator.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You are logged in as an administrator on the OpenShift web console.</simpara>
</listitem>
<listitem>
<simpara>You have configured the appropriate roles and permissions within your project to create an application. See the <link xlink:href="https://docs.openshift.com/container-platform/4.14/applications/index.html">Red Hat OpenShift documentation on Building applications</link> for more details.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In the <emphasis role="strong">Administrator</emphasis> perspective of the OpenShift web console, navigate to <emphasis role="strong">Operators</emphasis> → <emphasis role="strong">OperatorHub</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Use the <emphasis role="strong">Filter by keyword</emphasis> box to search for the Red Hat Developer Hub Operator in the catalog, and then click the <emphasis role="strong">Red Hat Developer Hub</emphasis> tile.</simpara>
</listitem>
<listitem>
<simpara>Install the Red Hat Developer Hub Operator. For more information, see <link xlink:href="https://docs.openshift.com/container-platform/4.14/operators/admin/olm-adding-operators-to-cluster.html#olm-installing-from-operatorhub-using-web-console_olm-adding-operators-to-a-cluster">Installing from OperatorHub using the web console</link>.</simpara>
<note>
<simpara>For enhanced security, you should deploy the Backstage Operator in a dedicated default namespace such as <literal>rhdh-operator</literal>. The cluster administrator can restrict other users' access to the operator resources through role bindings or cluster role bindings. You can choose to deploy the operator in the <literal>openshift-operators</literal> namespace instead, however, you should note that the Red Hat Developer Hub operator shares the namespace with other operators, and therefore any users who can create workloads in that namespace can get their privileges escalated from all operators' service accounts.</simpara>
</note>
</listitem>
<listitem>
<simpara>See the “As a developer” section to continue setting up your Red Hat Developer Hub instance.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="as-a-developer" remap="_as-a-developer">
<title>As a developer</title>
<simpara>As a developer, you can install Red Hat Developer Hub on your OpenShift Container Platform using the Operator.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your administrator has installed the Red Hat Developer Hub Operator. For more information see the <link linkend="proc-install-rhdh-operator_admin-rhdh">"As an administrator"</link> section.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a project in OpenShift for your Red Hat Developer Hub instance. For more information about creating a project in OpenShift, see the Red Hat OpenShift documentation.</simpara>
</listitem>
<listitem>
<simpara>From the Developer perspective in the Red Hat OpenShift web console, click the +Add tab.</simpara>
</listitem>
<listitem>
<simpara>From the Developer Catalog panel, click Operator Backed.</simpara>
</listitem>
<listitem>
<simpara>Search for Developer Hub or Backstage in the search bar and select the Developer Hub card.</simpara>
</listitem>
<listitem>
<simpara>Click Create.</simpara>
</listitem>
<listitem>
<simpara>Optionally, configure the Red Hat Developer Hub Backstage instance with non-default settings.</simpara>
</listitem>
<listitem>
<simpara>Click Create.</simpara>
</listitem>
<listitem>
<simpara>From the Topology tab,  wait for the database and Red Hat Developer Hub to start.</simpara>
</listitem>
<listitem>
<simpara>Click the Open URL option from the Developer Hub pod to start using the Red Hat Developer Hub platform.</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh/operator-install-1.png"/>
</imageobject>
<textobject><phrase>operator install 1</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="configuring-the-developer-hub-custom-resource" remap="_configuring-the-developer-hub-custom-resource">
<title>Configuring the Developer Hub Custom Resource</title>
<note>
<simpara>Updates to the Backstage Custom Resource (CR) are automatically handled by the Operator. However, updates to resources referenced by the CR,  such as ConfigMaps or Secrets, are not updated automatically unless the CR itself is updated. If you want to update resources referenced by the CR, then you must manually delete the Backstage Deployment so that the Operator can re-create it with the updated resources.</simpara>
</note>
<section xml:id="adding-a-custom-application-configuration-file-to-red-hat-openshift" remap="_adding-a-custom-application-configuration-file-to-red-hat-openshift">
<title>Adding a custom application configuration file to Red Hat OpenShift</title>
<simpara>To change the configuration of your Red Hat Developer Hub instance, you must add a custom application configuration file to OpenShift and reference it in the Custom Resource. In OpenShift, you can use the following content as a base template to create a ConfigMap such as <literal>app-config-rhdh.yaml</literal>:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config-rhdh
data:
  app-config-rhdh.yaml: |
    app:
      title: Red Hat Developer Hub

    backend:
      auth:
        keys:
        - secret: “${BACKEND_SECRET}”
       baseUrl: https://backstage-&lt;CUSTOM_RESOURCE_NAME&gt;-&lt;NAMESPACE_NAME&gt;.&lt;OPENSHIFT_INGRESS_DOMAIN&gt;
       cors:
         origin: https://backstage-&lt;CUSTOM_RESOURCE_NAME&gt;-&lt;NAMESPACE_NAME&gt;.&lt;OPENSHIFT_INGRESS_DOMAIN&gt;</programlisting>
<formalpara>
<title>Example</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config-rhdh
data:
  "app-config-rhdh.yaml": |
    app:
      title: Red Hat Developer Hub
      baseUrl: https://backstage-developer-hub-my-ns.apps.ci-ln-vtkzr22-72292.origin-ci-int-gce.dev.rhcloud.com
    backend:
      auth:
        keys:
          - secret: "${BACKEND_SECRET}"
      baseUrl: https://backstage-backstage-sample-my-ns.apps.ci-ln-vtkzr22-72292.origin-ci-int-gce.dev.rhcloud.com
      cors:
        origin: https://backstage-backstage-sample-my-ns.apps.ci-ln-vtkzr22-72292.origin-ci-int-gce.dev.rhcloud.com</programlisting>
</para>
</formalpara>
<simpara>There is a mandatory Backend Auth Key for Red Hat Developer Hub. This references an environment variable defined in an OpenShift Secret.</simpara>
<note>
<simpara>You are responsible for protecting your Red Hat Developer Hub installation from external and unauthorized access. The Backend Auth Key should be managed as any other secret. It should meet strong password requirements, you should not expose it in any configuration files and only inject it into configuration files as an environment variable.</simpara>
<simpara>For more information about roles and responsibilities in Developer Hub, see the <link linkend="con-rbac-overview_admin-rhdh">Role-Based Access Control (RBAC) in Red Hat Developer Hub</link> section in the Administration Guide for Red Hat Developer Hub.</simpara>
</note>
<simpara>You need to know the external URL of your Red Hat Developer Hub instance and set it in the <literal>app.baseUrl</literal>, <literal>backend.baseUrl</literal> and <literal>backend.cors.origin</literal> fields of the application configuration. By default, this will be named as follows: <literal><link xlink:href="https://backstage-&lt;CUSTOM_RESOURCE_NAME&gt;-&lt;NAMESPACE_NAME&gt;.&lt;OPENSHIFT_INGRESS_DOMAIN&gt;">https://backstage-&lt;CUSTOM_RESOURCE_NAME&gt;-&lt;NAMESPACE_NAME&gt;.&lt;OPENSHIFT_INGRESS_DOMAIN&gt;</link>;</literal>. You can use the <literal>oc get ingresses.config/cluster -o jsonpath='{.spec.domain}'</literal> command to display your ingress domain. If you are using a different host or sub-domain, which is customizable in the <literal>Custom Resource spec.application.route field</literal>, you must adjust the application configuration accordingly.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created an account in Red Hat OpenShift.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>From the <emphasis role="strong">Developer</emphasis> perspective, select the <emphasis role="strong">ConfigMaps</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create ConfigMap</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select the <emphasis role="strong">YAML view</emphasis> option in <emphasis role="strong">Configure via</emphasis> and make the changes to the file, if necessary.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select the <emphasis role="strong">Secrets</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create Key/value Secret</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Name the secret <literal>secrets-rhdh</literal>.</simpara>
</listitem>
<listitem>
<simpara>Add a key named <literal>BACKEND_SECRET</literal> and a base64 encoded string as a value. Use a unique value for each Red Hat Developer Hub instance. For example, you can use the following command to generate a key from your terminal:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">node -p 'require("crypto").randomBytes(24).toString("base64")'</programlisting>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select the <emphasis role="strong">Topology</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Click on the three dots menu of a Red Hat Developer Hub instance and select <emphasis role="strong">Edit Backstage</emphasis> to load the YAML view of the Red Hat Developer Hub instance.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh/operator-install-2.png"/>
</imageobject>
<textobject><phrase>operator install 2</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
<listitem>
<simpara>Add the <literal>spec.application.appConfig.configMaps</literal> and <literal>spec.application.extraEnvs.secrets</literal> fields to the Custom Resource, as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spec:  application:
    appConfig:
      mountPath: /opt/app-root/src
      configMaps:
         - name: app-config-rhdh
    extraEnvs:
      secrets:
         - name: secrets-rhdh
    extraFiles:
      mountPath: /opt-/app-root/src
    replicas: 1
    route:
      enabled: true
  database:
enableLocalDb: true</programlisting>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Save</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Navigate back to the <emphasis role="strong">Topology</emphasis> view and wait for the Red Hat Developer Hub pod to start.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Open URL</emphasis> option to start using the Red Hat Developer Hub platform with the new configuration changes.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="configuring-dynamic-plugins-with-the-operator" remap="_configuring-dynamic-plugins-with-the-operator">
<title>Configuring dynamic plugins with the Operator</title>
<simpara>You can store the configuration for dynamic plugins in a ConfigMap object that the Custom Resource can reference.</simpara>
<formalpara>
<title>Example using the GitHub dynamic plugin</title>
<para>In OpenShift, you can use the following content as a base template to create a ConfigMap named <literal>dynamic-plugins-rhdh</literal>:</para>
</formalpara>
<programlisting language="yaml" linenumbering="unnumbered">kind: ConfigMap
apiVersion: v1
metadata:
  name: dynamic-plugins-rhdh
data:
  dynamic-plugins.yaml: |
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: './dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic'
        disabled: false
        pluginConfig: {}</programlisting>
<note>
<simpara>If the <literal>pluginConfig</literal> field references environment variables, you must define the variables in your <literal>secrets-rhdh</literal> secret.</simpara>
</note>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to OpenShift and select the <emphasis role="strong">ConfigMaps</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create ConfigMap</emphasis>.</simpara>
<simpara>The <emphasis role="strong">Create ConfigMap</emphasis> page appears.</simpara>
</listitem>
<listitem>
<simpara>Select the <emphasis role="strong">YAML view</emphasis> option in <emphasis role="strong">Configure via</emphasis> and edit the file, if needed.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Create</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Go to the <emphasis role="strong">Topology</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Click on the three dots menu of a Red Hat Developer Hub instance and select <emphasis role="strong">Edit Backstage</emphasis> to load the YAML view of the Red Hat Developer Hub instance.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh/operator-install-2.png"/>
</imageobject>
<textobject><phrase>operator install 2</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
<listitem>
<simpara>Add the <literal>spec.application.dynamicPluginsConfigMapName</literal> field to the Custom Resource, as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spec:
  application:
    appConfig:
      mountPath: /opt/app-root/src
      configMaps:
        - name: app-config-rhdh
    dynamicPluginsConfigMapName: dynamic-plugins-rhdh
    extraEnvs:
      secrets:
        - name: secrets-rhdh
    extraFiles:
      mountPath: /opt-/app-root/src
    replicas: 1
    route:
      enabled: true
  database:
    enableLocalDb: true</programlisting>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Save</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Navigate back to the <emphasis role="strong">Topology</emphasis> view and wait for the Red Hat Developer Hub pod to start.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Open URL</emphasis> option to start using the Red Hat Developer Hub platform with the new configuration changes.</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Verification</title>
<para>To check that the dynamic plugins configuration has been loaded, append the following to your Red Hat Developer Hub root URL: <literal>/api/dynamic-plugins-info/loaded-plugins</literal> and check the list of plugins.</para>
</formalpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh/operator-install-3.png"/>
</imageobject>
<textobject><phrase>operator install 3</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="installing-red-hat-developer-hub-hub-using-a-custom-backstage-image" remap="_installing-red-hat-developer-hub-hub-using-a-custom-backstage-image">
<title>Installing Red Hat Developer Hub Hub using a custom Backstage image</title>
<simpara>You can install Red Hat Developer Hub that uses a custom Backstage image in one of the following ways:
* Use the <emphasis role="strong">Form view</emphasis> and enter the image in <emphasis role="strong">application</emphasis> → <emphasis role="strong">image</emphasis>
* Use the <emphasis role="strong">YAML view</emphasis> to enter the image directly in the Backstage Custom Resource specification, as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spec:
  application:
       image: &lt;your custom image&gt;</programlisting>
<warning>
<simpara>Installing a Red Hat Developer Hub application with a custom Backstage image might pose security risks to your organization. It is your responsibility to ensure that the image is from trusted sources, and has been tested and validated for security compliance. Red Hat only supports the images shipped within the Red Hat Developer Hub Operator.</simpara>
</warning>
</section>
<section xml:id="installing-red-hat-developer-hub-using-the-operator-in-an-air-gapped-environment" remap="_installing-red-hat-developer-hub-using-the-operator-in-an-air-gapped-environment">
<title>Installing Red Hat Developer Hub using the operator in an air-gapped environment</title>
<simpara>On an OpenShift cluster operating on a restricted network, public resources are not available. However, deploying the Red Hat Developer Hub (RHDH) Operator and running RHDH requires the following public resources:</simpara>
<itemizedlist>
<listitem>
<simpara>Operator images (bundle, operator, catalog)</simpara>
</listitem>
<listitem>
<simpara>Operands images (RHDH, PostgreSQL)</simpara>
</listitem>
</itemizedlist>
<simpara>To make these resources available, replace these resources with their equivalent resources in a mirror registry accessible to the OpenShift cluster.</simpara>
<simpara>You can use a helper script that mirrors the necessary images and provides the necessary configuration to ensure those images will be used when installing the RHDH Operator and creating RHDH instances.</simpara>
<note>
<simpara>This script requires a target mirror registry which you should already have installed if your OpenShift cluster is ready to operate on a restricted network. However, if you are preparing your cluster for disconnected usage, you can use the script to deploy a mirror registry in the cluster and use it for the mirroring process.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>An active <literal>oc</literal> session with administrative permissions to the OpenShift cluster. See <link xlink:href="https://docs.openshift.com/container-platform/4.14/cli_reference/openshift_cli/getting-started-cli.html">Getting started with the OpenShift CLI</link>.</simpara>
</listitem>
<listitem>
<simpara>An active <literal>oc registry</literal> session to the <literal>registry.redhat.io</literal> Red Hat Ecosystem Catalog. See <link xlink:href="https://access.redhat.com/RegistryAuthentication">Red Hat Container Registry Authentication</link>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>opm</literal> CLI tool is installed. See <link xlink:href="https://docs.openshift.com/container-platform/4.14/cli_reference/opm/cli-opm-install.html">Installing the opm CLI</link>.</simpara>
</listitem>
<listitem>
<simpara>The jq package is installed. See <link xlink:href="https://jqlang.github.io/jq/download/">Download jq</link>.</simpara>
</listitem>
<listitem>
<simpara>Podman is installed. See <link xlink:href="https://podman.io/docs/installation">Podman Installation Instructions</link>.</simpara>
</listitem>
<listitem>
<simpara>Skopeo version 1.14 or higher is installed. <link xlink:href="https://github.com/containers/skopeo/blob/main/install.md">See Installing Skopeo</link>.</simpara>
</listitem>
<listitem>
<simpara>If you already have a mirror registry for your cluster, an active Skopeo session with administrative access to this registry is required. See <link xlink:href="https://github.com/containers/skopeo#authenticating-to-a-registry">Authenticating to a registry</link> and <link xlink:href="https://docs.openshift.com/container-platform/4.14/installing/disconnected_install/installing-mirroring-installation-images.html">Mirroring images for a disconnected installation</link>.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The internal OpenShift cluster image registry cannot be used as a target mirror registry. See <link xlink:href="https://docs.openshift.com/container-platform/4.14/installing/disconnected_install/installing-mirroring-installation-images.html#installation-about-mirror-registry_installing-mirroring-installation-images">About the mirror registry</link>.</simpara>
</note>
<itemizedlist>
<listitem>
<simpara>If you prefer to create your own mirror registry, see <link xlink:href="https://docs.openshift.com/container-platform/4.14/installing/disconnected_install/installing-mirroring-creating-registry.html">Creating a mirror registry with mirror registry for Red Hat OpenShift</link>.</simpara>
</listitem>
<listitem>
<simpara>If you do not already have a mirror registry, you can use the helper script to create one for you and you need the following additional prerequisites:</simpara>
</listitem>
<listitem>
<simpara>The cURL package is installed. For Red Hat Enterprise Linux, the curl command is available by installing the curl package. To use curl for other platforms, see the <link xlink:href="https://curl.se/">cURL website</link>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>htpasswd</literal> command is available. For Red Hat Enterprise Linux, the <literal>htpasswd</literal> command is available by installing the <literal>httpd-tools</literal> package.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Download and run the mirroring script to install a custom Operator catalog and mirror the related images: <literal>prepare-restricted-environment.sh</literal> (<link xlink:href="https://github.com/janus-idp/operator/blob/1.1.x/.rhdh/scripts/prepare-restricted-environment.sh">source</link>).</simpara>
<programlisting language="yaml" linenumbering="unnumbered"># if you do not already have a target mirror registry
# and want the script to create one for you.
bash prepare-restricted-environment.sh \
   --prod_operator_index "registry.redhat.io/redhat/redhat-operator-index:v4.14" \
   --prod_operator_package_name "rhdh" \
   --prod_operator_bundle_name "rhdh-operator" \
   --prod_operator_version "v1.1.0"

# or, if you already have a target mirror registry
bash prepare-restricted-environment.sh \
   --prod_operator_index "registry.redhat.io/redhat/redhat-operator-index:v4.14" \
   --prod_operator_package_name "rhdh" \
   --prod_operator_bundle_name "rhdh-operator" \
   --prod_operator_version "v1.1.0" \
   --use_existing_mirror_registry "&lt;my_registry&gt;"</programlisting>
<note>
<simpara>The script can take several minutes to complete as it copies multiple images to the mirror registry.</simpara>
</note>
</listitem>
<listitem>
<simpara>Refer to the <link linkend="proc-install-rhdh-operator_admin-rhdh">Installing Red Hat Developer Hub using the operator as an administrator</link> section to install the operator and configure your Red Hat Developer Hub instance.</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="con-rbac-overview_admin-rhdh">
<title>Role-Based Access Control (RBAC) in Red Hat Developer Hub</title>
<simpara>Role-Based Access Control is a security paradigm that restricts access to authorized users. This feature includes defining roles with specific permissions and then assigning those roles to the users.</simpara>
<simpara>The Red Hat Developer Hub uses RBAC to improve the permission system within the platform. The RBAC feature in Developer Hub introduces an administrator role and leverages the organizational structure including teams, groups, and users by facilitating efficient access control.</simpara>
<section xml:id="con-rbac-config-permission-policies_admin-rhdh">
<title>Permission policies configuration</title>
<simpara>There are two approaches to configure the permission policies in Red Hat Developer Hub, including:</simpara>
<itemizedlist>
<listitem>
<simpara>Configuration of permission policies administrators</simpara>
</listitem>
<listitem>
<simpara>Configuration of permission policies defined in an external file</simpara>
</listitem>
</itemizedlist>
<section xml:id="con-rbac-config-permission-policies-admin_admin-rhdh">
<title>Configuration of permission policies administrators</title>
<simpara>The permission policies for users and groups in the Developer Hub are managed by permission policy administrators. Only permission policy administrators can access the Role-Based Access Control REST API.</simpara>
<simpara>You can set the credentials of a permission policy administrator in the <literal>app-config.yaml</literal> file as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">permission:
  enabled: true
  rbac:
    admin:
      users:
        - name: user:default/joeuser</programlisting>
</section>
<section xml:id="con-rbac-config-permission-policies-external-file_admin-rhdh">
<title>Configuration of permission policies defined in an external file</title>
<simpara>You can follow this approach of configuring the permission policies before starting the Red Hat Developer Hub. If permission policies are defined in an external file, then you can import the same file in the Developer Hub. The permission policies need to be defined in Casbin rules format. For information about the Casbin rules format, see <link xlink:href="https://casbin.org/docs/category/the-basics">Basics of Casbin rules</link>.</simpara>
<simpara>The following is an example of permission policies configuration:</simpara>
<simpara><literal>p, role:default/guests, catalog-entity, read, deny</literal></simpara>
<simpara><literal>p, role:default/guests, catalog.entity.create, create, deny</literal></simpara>
<simpara><literal>g, user:default/&lt;USER_TO_ROLE&gt;, role:default/guests</literal></simpara>
<simpara>If a defined permission does not contain an action associated with it, then add <literal>use</literal> as a policy. See the following example:</simpara>
<simpara><literal>p, role:default/guests, kubernetes.proxy, use, deny</literal></simpara>
<simpara>You can define the <literal>policy.csv</literal> file path in the <literal>app-config.yaml</literal> file:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">permission:
  enabled: true
  rbac:
    policies-csv-file: /some/path/rbac-policy.csv</programlisting>
<section xml:id="mounting-literal-policy-csv-literal-file-to-the-developer-hub-helm-chart" remap="_mounting-literal-policy-csv-literal-file-to-the-developer-hub-helm-chart">
<title>Mounting <literal>policy.csv</literal> file to the Developer Hub Helm Chart</title>
<simpara>When the Red Hat Developer Hub is deployed with the Helm Chart, then you must define the <literal>policy.csv</literal> file by mounting it to the Developer Hub Helm Chart.</simpara>
<simpara>You can add your <literal>policy.csv</literal> file to the Developer Hub Helm Chart by creating a <literal>configMap</literal> and mounting it.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You are logged in to the OCP using the OpenShift web console.</simpara>
</listitem>
<listitem>
<simpara>Red Hat Developer Hub is installed and deployed using Helm Chart.</simpara>
<simpara>For more information about installing the Red Hat Developer Hub using Helm Chart, see <xref linkend="proc-install-rhdh-helm_admin-rhdh"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Red Hat OpenShift, create a <literal>configMap</literal> to hold the policies as shown in the following example:</simpara>
<formalpara>
<title>Example <literal>ConfigMap</literal></title>
<para>
<screen>kind: ConfigMap
apiVersion: v1
metadata:
  name: rbac-policy
  namespace: rhdh
data:
  rbac-policy.csv: |
    p, role:default/guests, catalog-entity, read, allow
    p, role:default/guests, catalog.entity.create, create, allow

    g, user:default/&lt;YOUR_USER&gt;, role:default/guests</screen>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>In the Developer Hub Helm Chart, go to <emphasis role="strong">Root Schema → Backstage chart schema → Backstage parameters → Backstage container additional volume mounts</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Add Backstage container additional volume mounts</emphasis> and add the following values:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">mountPath</emphasis>: <literal>opt/app-root/src/rbac</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Name</emphasis>: <literal>rbac-policy</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Add the RBAC policy to the <emphasis role="strong">Backstage container additional volumes</emphasis> in the Developer Hub Helm Chart:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">name</emphasis>: <literal>rbac-policy</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">configMap</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">defaultMode</emphasis>: <literal>420</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">name</emphasis>: <literal>rbac-policy</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Update the policy path in the <literal>app-config.yaml</literal> file as follows:</simpara>
<formalpara>
<title>Example <literal>app-config.yaml</literal> file</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">permission:
  enabled: true
  rbac:
    policies-csv-file: ./rbac/rbac-policy.csv</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="ref-rbac-permission-policies_admin-rhdh">
<title>Permission policies in Red Hat Developer Hub</title>
<simpara>Permission policies in Red Hat Developer Hub are a set of rules to govern access to resources or functionalities. These policies state the authorization level that is granted to users based on their roles. The permission policies are implemented to maintain security and confidentiality within a given environment.</simpara>
<simpara>The following permission policies are supported in the Developer Hub:</simpara>
<variablelist>
<varlistentry>
<term>Catalog permissions</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="45*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Resource type</entry>
<entry align="left" valign="top">Policy</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>catalog.entity.read</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>catalog-entity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>read</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to read from the catalog</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>catalog.entity.create</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>create</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to create catalog entities, including registering an existing component in the catalog</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>catalog.entity.refresh</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>catalog-entity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>update</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to refresh a single or multiple entities from the catalog</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>catalog.entity.delete</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>catalog-entity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>delete</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to delete a single or multiple entities from the catalog</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>catalog.location.read</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>read</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to read a single or multiple locations from the catalog</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>catalog.location.create</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>create</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to create locations within the catalog</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>catalog.location.delete</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>delete</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to delete locations from the catalog</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry>
<term>Scaffolder permissions</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="45*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Resource type</entry>
<entry align="left" valign="top">Policy</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>scaffolder.action.execute</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>scaffolder-action</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Allows the execution of an action from a template</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>scaffolder.template.parameter.read</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>scaffolder-template</literal></simpara></entry>
<entry align="left" valign="top"><simpara>read</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to read a single or multiple one parameters from a template</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>scaffolder.template.step.read</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>scaffolder-template</literal></simpara></entry>
<entry align="left" valign="top"><simpara>read</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to read a single or multiple steps from a template</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry>
<term>RBAC permissions</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="45*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Resource type</entry>
<entry align="left" valign="top">Policy</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>policy.entity.read</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>policy-entity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>read</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to read permission policies and roles</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>policy.entity.create</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>policy-entity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>create</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to create a single or multiple permission policies and roles</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>policy.entity.update</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>policy-entity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>update</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to update a single or multiple permission policies and roles</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>policy.entity.delete</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>policy-entity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>delete</simpara></entry>
<entry align="left" valign="top"><simpara>Allows user or role to delete a single or multiple permission policies and roles</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry>
<term>Kubernetes permissions</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="45*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Resource type</entry>
<entry align="left" valign="top">Policy</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kubernetes.proxy</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Allows user or role to access the proxy endpoint</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="proc-rbac-ui-manage-roles_admin-rhdh">
<title>Managing role-based access controls (RBAC) using the Red Hat Developer Hub Web UI</title>
<simpara>Administrators can use the Developer Hub web interface (Web UI) to allocate specific roles and permissions to individual users or groups. Allocating roles ensures that access to resources and functionalities is regulated across the Developer Hub.</simpara>
<simpara>With the administrator role in Developer Hub, you can assign permissions to users and groups, which allow users or groups to view, create, modify, and delete the roles using the Developer Hub Web UI.</simpara>
<simpara>To access the RBAC features in the Web UI, you must install and configure the <literal>@janus-idp/backstage-plugin-rbac</literal> plugin as a dynamic plugin. For more information about installing a dynamic plugin, see <xref linkend="con-rhdh-installing-dynamic-plugins_admin-rhdh"/>.</simpara>
<simpara>After you install the <literal>@janus-idp/backstage-plugin-rbac</literal> plugin, the <emphasis role="strong">Administration</emphasis> option appears at the bottom of the sidebar. When you can click <emphasis role="strong">Administration</emphasis>, the RBAC tab appears by default, displaying all of the existing roles created in the Developer Hub. In the RBAC tab, you can also view the total number of users, groups, and the total number of permission policies associated with a role. You can also edit or delete a role using the <emphasis role="strong">Actions</emphasis> column.</simpara>
<section xml:id="proc-rbac-ui-create-role_admin-rhdh">
<title>Creating a role in the Red Hat Developer Hub Web UI</title>
<simpara>You can create a role in the Red Hat Developer Hub using the Web UI.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have an administrator role in the Developer Hub.</simpara>
</listitem>
<listitem>
<simpara>You have installed the <literal>@janus-idp/backstage-plugin-rbac</literal> plugin in Developer Hub. For more information, see <xref linkend="con-rhdh-installing-dynamic-plugins_admin-rhdh"/>.</simpara>
</listitem>
<listitem>
<simpara>You have configured the required permission policies. For more information, see <xref linkend="con-rbac-config-permission-policies_admin-rhdh"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Go to <emphasis role="strong">Administration</emphasis> at the bottom of the sidebar in the Developer Hub.</simpara>
<simpara>The <emphasis role="strong">RBAC</emphasis> tab appears, displaying all the created roles in the Developer Hub.</simpara>
</listitem>
<listitem>
<simpara>(Optional) Click any role to view the role information on the <emphasis role="strong">OVERVIEW</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">CREATE</emphasis> to create a role.</simpara>
</listitem>
<listitem>
<simpara>Enter the name and description of the role in the given fields and click <emphasis role="strong">NEXT</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Add users and groups using the search field, and click <emphasis role="strong">NEXT</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Plugin</emphasis> and <emphasis role="strong">Permission</emphasis> from the drop-downs in the <emphasis role="strong">Add permission policies</emphasis> section.</simpara>
</listitem>
<listitem>
<simpara>Select or clear the <emphasis role="strong">Policy</emphasis> that you want to set in the <emphasis role="strong">Add permission policies</emphasis> section, and click <emphasis role="strong">NEXT</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Review the added information in the <emphasis role="strong">Review and create</emphasis> section.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">CREATE</emphasis>.</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Verification</title>
<para>The created role appears in the list available in the <emphasis role="strong">RBAC</emphasis> tab.</para>
</formalpara>
</section>
<section xml:id="proc-rbac-ui-edit-role_admin-rhdh">
<title>Editing a role in the Red Hat Developer Hub Web UI</title>
<simpara>You can edit a role in the Red Hat Developer Hub using the Web UI.</simpara>
<note>
<simpara>The policies generated from a <literal>policy.csv</literal> or ConfigMap file cannot be edited or deleted using the Developer Hub Web UI.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have an administrator role in the Developer Hub.</simpara>
</listitem>
<listitem>
<simpara>You have installed the <literal>@janus-idp/backstage-plugin-rbac</literal> plugin in Developer Hub. For more information, see <xref linkend="con-rhdh-installing-dynamic-plugins_admin-rhdh"/>.</simpara>
</listitem>
<listitem>
<simpara>You have configured the required permission policies. For more information, see <xref linkend="con-rbac-config-permission-policies_admin-rhdh"/>.</simpara>
</listitem>
<listitem>
<simpara>The role that you want to edit is created in the Developer Hub.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Go to <emphasis role="strong">Administration</emphasis> at the bottom of the sidebar in the Developer Hub.</simpara>
<simpara>The <emphasis role="strong">RBAC</emphasis> tab appears, displaying all the created roles in the Developer Hub.</simpara>
</listitem>
<listitem>
<simpara>(Optional) Click any role to view the role information on the <emphasis role="strong">OVERVIEW</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>Select the edit icon for the role that you want to edit.</simpara>
</listitem>
<listitem>
<simpara>Edit the details of the role, such as name, description, users and groups, and permission policies, and click <emphasis role="strong">NEXT</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Review the edited details of the role and click <emphasis role="strong">SAVE</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>After editing a role, you can view the edited details of a role on the <emphasis role="strong">OVERVIEW</emphasis> page of a role. You can also edit a role’s users and groups or permissions by using the edit icon on the respective cards on the <emphasis role="strong">OVERVIEW</emphasis> page.</simpara>
</section>
<section xml:id="proc-rbac-ui-delete-role_admin-rhdh">
<title>Deleting a role in the Red Hat Developer Hub Web UI</title>
<simpara>You can delete a role in the Red Hat Developer Hub using the Web UI.</simpara>
<note>
<simpara>The policies generated from a <literal>policy.csv</literal> or ConfigMap file cannot be edited or deleted using the Developer Hub Web UI.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have an administrator role in the Developer Hub.</simpara>
</listitem>
<listitem>
<simpara>You have installed the <literal>@janus-idp/backstage-plugin-rbac</literal> plugin in Developer Hub. For more information, see <xref linkend="con-rhdh-installing-dynamic-plugins_admin-rhdh"/>.</simpara>
</listitem>
<listitem>
<simpara>You have configured the required permission policies. For more information, see <xref linkend="con-rbac-config-permission-policies_admin-rhdh"/>.</simpara>
</listitem>
<listitem>
<simpara>The role that you want to delete is created in the Developer Hub.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Go to <emphasis role="strong">Administration</emphasis> at the bottom of the sidebar in the Developer Hub.</simpara>
<simpara>The <emphasis role="strong">RBAC</emphasis> tab appears, displaying all the created roles in the Developer Hub.</simpara>
</listitem>
<listitem>
<simpara>(Optional) Click any role to view the role information on the <emphasis role="strong">OVERVIEW</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>Select the delete icon from the <emphasis role="strong">Actions</emphasis> column for the role that you want to delete.</simpara>
<simpara><emphasis role="strong">Delete this role?</emphasis> pop-up appears on the screen.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">DELETE</emphasis>.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="con-rbac-rest-api_admin-rhdh">
<title>Role-based Access Control (RBAC) REST API</title>
<simpara>Red Hat Developer Hub provides RBAC REST API that you can use to manage the permissions and roles in the Developer Hub. This API supports you to facilitate and automate the maintenance of Developer Hub permission policies and roles.</simpara>
<simpara>Using the RBAC REST API, you can perform the following actions:</simpara>
<itemizedlist>
<listitem>
<simpara>Retrieve information about all permission policies or specific permission policies, or roles</simpara>
</listitem>
<listitem>
<simpara>Create, update, or delete a permission policy or a role</simpara>
</listitem>
<listitem>
<simpara>Retrieve permission policy information about static plugins</simpara>
</listitem>
</itemizedlist>
<simpara>The RBAC REST API requires the following components:</simpara>
<simpara><emphasis role="strong">Authorization</emphasis></simpara>
<simpara>The RBAC REST API requires Bearer token authorization for the permitted user role. For development purposes, you can access a web console in a browser. When you refresh a token request in the list of network requests, you find the token in the response JSON.</simpara>
<simpara><literal>Authorization: Bearer $token</literal></simpara>
<simpara>For example, on the <emphasis role="strong">Homepage</emphasis> of the Developer Hub, you can navigate to the <emphasis role="strong">Network</emphasis> tab and search for the <literal>query?term=</literal> network call. Alternatively, you can go to the <emphasis role="strong">Catalog</emphasis> page and select any network call with <literal>entity-facets</literal> to acquire the Bearer token.</simpara>
<simpara><emphasis role="strong">HTTP methods</emphasis></simpara>
<simpara>The RBAC REST API supports the following HTTP methods for API requests:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>GET</literal>: Retrieves specified information from a specified resource endpoint</simpara>
</listitem>
<listitem>
<simpara><literal>POST</literal>: Creates or updates a resource</simpara>
</listitem>
<listitem>
<simpara><literal>PUT</literal>: Updates a resource</simpara>
</listitem>
<listitem>
<simpara><literal>DELETE</literal>: Deletes a resource</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Base URL</emphasis></simpara>
<simpara>The base URL for RBAC REST API requests is <literal><link xlink:href="http://SERVER:PORT/api/permission/policies">http://SERVER:PORT/api/permission/policies</link></literal>, such as <literal><link xlink:href="http://localhost:7007/api/permission/policies">http://localhost:7007/api/permission/policies</link></literal>.</simpara>
<simpara><emphasis role="strong">Endpoints</emphasis></simpara>
<simpara>RBAC REST API endpoints, such as <literal>/api/permission/policies/[kind]/[namespace]/[name]</literal> for specified kind, namespace, and username, are the URI that you append to the base URL to access the corresponding resource.</simpara>
<simpara>Example request URL for <literal>/api/permission/policies/[kind]/[namespace]/[name]</literal> endpoint is:</simpara>
<simpara><literal><link xlink:href="http://localhost:7007/api/permission/policies/user/default/johndoe">http://localhost:7007/api/permission/policies/user/default/johndoe</link></literal></simpara>
<note>
<simpara>If at least one permission is assigned to <literal>user:default/johndoe</literal>, then the example request URL mentioned previously returns a result if sent in a <literal>GET</literal> response with a valid authorization token. However, if permission is only assigned to roles, then the example request URL does not return an output.</simpara>
</note>
<simpara><emphasis role="strong">Request data</emphasis></simpara>
<simpara>HTTP <literal>POST</literal> requests in the RBAC REST API may require a JSON request body with data to accompany the request.</simpara>
<simpara>Example <literal>POST</literal> request URL and JSON request body data for
<literal><link xlink:href="http://localhost:7007/api/permission/policies">http://localhost:7007/api/permission/policies</link></literal>:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "entityReference": "role:default/test",
    "permission": "catalog-entity",
    "policy": "delete",
    "effect": "allow"
}</programlisting>
<simpara><emphasis role="strong">HTTP status codes</emphasis></simpara>
<simpara>The RBAC REST API supports the following HTTP status codes to return as responses:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>200</literal> OK: The request was successful.</simpara>
</listitem>
<listitem>
<simpara><literal>201</literal> Created: The request resulted in a new resource being successfully created.</simpara>
</listitem>
<listitem>
<simpara><literal>204</literal> No Content: The request was successful, but there is no additional content to send in the response payload.</simpara>
</listitem>
<listitem>
<simpara><literal>400</literal> Bad Request: input error with the request</simpara>
</listitem>
<listitem>
<simpara><literal>401</literal> Unauthorized: lacks valid authentication for the requested resource</simpara>
</listitem>
<listitem>
<simpara><literal>403</literal> Forbidden: refusal to authorize request</simpara>
</listitem>
<listitem>
<simpara><literal>404</literal> Not Found: could not find requested resource</simpara>
</listitem>
<listitem>
<simpara><literal>409</literal> Conflict: request conflict with the current state and the target resource</simpara>
</listitem>
</itemizedlist>
<section xml:id="proc-rbac-send-request-rbac-rest-api_admin-rhdh">
<title>Sending requests with the RBAC REST API using a REST client or curl utility</title>
<simpara>The RBAC REST API enables you to interact with the permission policies and roles in Developer Hub without using the user interface. You can send RBAC REST API requests using any REST client or curl utility.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Red Hat Developer Hub is installed and running. For more information about installing Red Hat Developer Hub, see <xref linkend="proc-install-rhdh-helm_admin-rhdh"/>. .</simpara>
</listitem>
<listitem>
<simpara>You have access to the Developer Hub.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Identify a relevant API endpoint to which you want to send a request, such as <literal>POST /api/permission/policies</literal>. Adjust any request details according to your use case.</simpara>
<simpara><emphasis role="strong">For REST client</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara>Authorization: Enter the generated token from the web console.</simpara>
</listitem>
<listitem>
<simpara>HTTP method: Set to <literal>POST</literal>.</simpara>
</listitem>
<listitem>
<simpara>URL: Enter the RBAC REST API base URL and endpoint such as
<literal><link xlink:href="http://localhost:7007/api/permission/policies">http://localhost:7007/api/permission/policies</link></literal>.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">For curl utility</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>-X</literal>: Set to <literal>POST</literal></simpara>
</listitem>
<listitem>
<simpara><literal>-H</literal>: Set the following header:</simpara>
<simpara><literal>Content-type: application/json</literal></simpara>
<simpara><literal>Authorization: Bearer $token</literal></simpara>
<simpara><literal>$token</literal> is the requested token from the web console in a browser.</simpara>
</listitem>
<listitem>
<simpara>URL: Enter the following RBAC REST API base URL endpoint, such as <literal><link xlink:href="http://localhost:7007/api/permission/policies">http://localhost:7007/api/permission/policies</link></literal></simpara>
</listitem>
<listitem>
<simpara><literal>-d</literal>: Add a request JSON body</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Example request</emphasis>:</simpara>
<simpara><literal>curl -X POST "http://localhost:7007/api/permission/policies" -d '{"entityReference":"role:default/test", "permission": "catalog-entity", "policy": "read", "effect":"allow"}' -H "Content-Type: application/json" -H "Authorization: Bearer $token" -v</literal></simpara>
</listitem>
<listitem>
<simpara>Execute the request and review the response.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="ref-rbac-rest-api-endpoints_admin-rhdh">
<title>Supported RBAC REST API endpoints</title>
<simpara>The RBAC REST API provides the following endpoints for managing permission policies and roles in the Developer Hub and for retrieving information about the policies and roles.</simpara>
<section xml:id="permission-policies" remap="_permission-policies">
<title>Permission policies</title>
<simpara>The RBAC REST API supports the following endpoints for managing permission policies in the Red Hat Developer Hub.</simpara>
<variablelist>
<varlistentry>
<term>[GET] /api/permission/policies</term>
<listitem>
<simpara>Returns permission policies list for all users.</simpara>
<formalpara>
<title>Example response (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">[
  {
    "entityReference": "role:default/test",
    "permission": "catalog-entity",
    "policy": "read",
    "effect": "allow"
  },
  {
    "entityReference": "role:default/test",
    "permission": "catalog.entity.create",
    "policy": "use",
    "effect": "allow"
  },
]</programlisting>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[GET] /api/permission/policies/{kind}/{namespace}/{name}</term>
<listitem>
<simpara>Returns permission policies related to the specified entity reference.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Request parameters</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kind</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Kind of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>namespace</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Namespace of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Username related to the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<formalpara>
<title>Example response (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">[
  {
    "entityReference": "role:default/test",
    "permission": "catalog-entity",
    "policy": "read",
    "effect": "allow"
  },
  {
    "entityReference": "role:default/test",
    "permission": "catalog.entity.create",
    "policy": "use",
    "effect": "allow"
  }
]</programlisting>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[POST] /api/permission/policies</term>
<listitem>
<simpara>Creates a permission policy for a specified entity.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Request parameters</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>entityReference</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Reference values of an entity including namespace and name</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>permission</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type of the permission</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>policy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Read or write policy to the permission</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>effect</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indication of allowing or not allowing the policy</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<formalpara>
<title>Example request body (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
    "entityReference": "role:default/test",
    "permission": "catalog-entity",
    "policy": "read",
    "effect": "allow"
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Example response</title>
<para>
<screen>201 Created</screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[PUT] /api/permission/policies/{kind}/{namespace}/{name}</term>
<listitem>
<simpara>Updates a permission policy for a specified entity.</simpara>
<formalpara>
<title>Request parameters</title>
<para>The request body contains the <literal>oldPolicy</literal> and <literal>newPolicy</literal> objects:</para>
</formalpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>permission</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type of the permission</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>policy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Read or write policy to the permission</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>effect</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indication of allowing or not allowing the policy</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Example request body (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
    "oldPolicy": {
        "permission": "catalog-entity",
        "policy": "read",
        "effect": "deny"
    },
    "newPolicy": {
        "permission": "policy-entity",
        "policy": "read",
        "effect": "allow"
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Example response</title>
<para>
<screen>200</screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[DELETE] /api/permission/policies/{kind}/{namespace}/{name}?permission={value1}&amp;policy={value2}&amp;effect={value3}</term>
<listitem>
<simpara>Deletes a permission policy added to the specified entity.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Request parameters</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kind</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Kind of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>namespace</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Namespace of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Username related to the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>permission</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type of the permission</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>policy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Read or write policy to the permission</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>effect</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indication of allowing or not allowing the policy</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<formalpara>
<title>Example response</title>
<para>
<screen>204 No Content</screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[GET] /api/permission/plugins/policies</term>
<listitem>
<simpara>Returns permission policies for all static plugins.</simpara>
<formalpara>
<title>Example response (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">[
  {
    "pluginId": "catalog",
      "policies": [
        {
          "permission": "catalog-entity",
          "policy": "read"
        },
        {
          "permission": "catalog.entity.create",
          "policy": "create"
        },
        {
          "permission": "catalog-entity",
          "policy": "delete"
        },
        {
          "permission": "catalog-entity",
          "policy": "update"
        },
        {
          "permission": "catalog.location.read",
          "policy": "read"
        },
        {
          "permission": "catalog.location.create",
          "policy": "create"
        },
        {
          "permission": "catalog.location.delete",
          "policy": "delete"
        }
      ]
    },
  ...
]</programlisting>
</para>
</formalpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="roles" remap="_roles">
<title>Roles</title>
<simpara>The RBAC REST API supports the following endpoints for managing roles in the Red Hat Developer Hub.</simpara>
<variablelist>
<varlistentry>
<term>[GET] /api/permission/roles</term>
<listitem>
<simpara>Returns all roles in Developer Hub.</simpara>
<formalpara>
<title>Example response (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">[
  {
    "memberReferences": ["user:default/pataknight"],
    "name": "role:default/guests"
  },
  {
    "memberReferences": [
      "group:default/janus-authors",
      "user:default/matt"
    ],
    "name": "role:default/rbac_admin"
  }
]</programlisting>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[GET] /api/permission/roles/{kind}/{namespace}/{name}</term>
<listitem>
<simpara>Creates a role in Developer Hub.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Request parameters</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>body</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The <literal>memberReferences</literal>, <literal>group</literal>, <literal>namespace</literal>, and <literal>name</literal> the new role to be created.</simpara></entry>
<entry align="left" valign="top"><simpara>Request body</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<formalpara>
<title>Example request body (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "memberReferences": ["group:default/test"],
  "name": "role:default/test_admin"
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Example response</title>
<para>
<screen>201 Created</screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[PUT] /api/permission/roles/{kind}/{namespace}/{name}</term>
<listitem>
<simpara>Updates <literal>memberReferences</literal>, <literal>kind</literal>, <literal>namespace</literal>, or <literal>name</literal> for a role in Developer Hub.</simpara>
<formalpara>
<title>Request parameters</title>
<para>The request body contains the <literal>oldRole</literal> and <literal>newRole</literal> objects:</para>
</formalpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>body</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The <literal>memberReferences</literal>, <literal>group</literal>, <literal>namespace</literal>, and <literal>name</literal> the new role to be created.</simpara></entry>
<entry align="left" valign="top"><simpara>Request body</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Example request body (JSON)</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "oldRole": {
    "memberReferences": ["group:default/test"],
    "name": "role:default/test_admin"
  },
  "newRole": {
    "memberReferences": ["group:default/test", "user:default/test2"],
    "name": "role:default/test_admin"
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Example response</title>
<para>
<screen>200 OK</screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[DELETE] /api/permission/roles/{kind}/{namespace}/{name}?memberReferences=&lt;VALUE&gt;</term>
<listitem>
<simpara>Deletes the specified user or group from a role in Developer Hub.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Request parameters</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kind</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Kind of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>namespace</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Namespace of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Username related to the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>memberReferences</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Associated group information</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<formalpara>
<title>Example response</title>
<para>
<screen>204</screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term>[DELETE] /api/permission/roles/{kind}/{namespace}/{name}</term>
<listitem>
<simpara>Deletes a specified role from Developer Hub.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Request parameters</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="45*"/>
<colspec colname="col_3" colwidth="15*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Requirement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>kind</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Kind of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>namespace</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Namespace of the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Username related to the entity</simpara></entry>
<entry align="left" valign="top"><simpara>String</simpara></entry>
<entry align="left" valign="top"><simpara>Required</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<formalpara>
<title>Example response</title>
<para>
<screen>204</screen>
</para>
</formalpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
</section>
</chapter>
<chapter xml:id="rhdh-installing-dynamic-plugins">
<title>Dynamic plugin installation</title>
<simpara>The dynamic plugin support is based on the backend plugin manager package, which is a service that scans a configured root directory (<literal>dynamicPlugins.rootDirectory</literal> in the app config) for dynamic plugin packages and loads them dynamically.</simpara>
<simpara>You can use the dynamic plugins that come preinstalled with Red Hat Developer Hub or install external dynamic plugins from a public NPM registry.</simpara>
<section xml:id="con-preinstalled-dynamic-plugins">
<title>Preinstalled dynamic plugins</title>
<simpara>Red Hat Developer Hub is preinstalled with a selection of dynamic plugins. The dynamic plugins that require custom configuration are disabled by default.</simpara>
<simpara>For a complete list of dynamic plugins that are preinstalled in this release of Developer Hub, see the <link linkend="rhdh-supported-plugins">Dynamic plugins support matrix</link>.</simpara>
<simpara>Upon application startup, for each plugin that is disabled by default, the <literal>install-dynamic-plugins init container</literal> within the Developer Hub pod log displays a message similar to the following:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">======= Skipping disabled dynamic plugin ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic</programlisting>
<simpara>To enable this plugin, add a package with the same name to the Helm chart and change the value in the <literal>disabled</literal> field to ‘false’. For example:</simpara>
<programlisting language="java" linenumbering="unnumbered">global:
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic
        disabled: false</programlisting>
<note>
<simpara>The default configuration for a plugin is extracted from the <literal>dynamic-plugins.default.yaml`</literal> file, however, you can use a <literal>pluginConfig</literal> entry to override the default configuration.</simpara>
</note>
<section xml:id="rhdh-supported-plugins">
<title>Preinstalled dynamic plugin descriptions and details</title>
<important>
<simpara>Technology Preview features are not supported with Red Hat production service level agreements (SLAs), might not be functionally complete, and Red Hat does not recommend using them for production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.</simpara>
<simpara>For more information on Red Hat Technology Preview features, see <link xlink:href="https://access.redhat.com/support/offerings/techpreview/">Technology Preview Features Scope</link>.</simpara>
<simpara>Additional detail on how Red Hat provides support for bundled community dynamic plugins is available on the <link xlink:href="https://access.redhat.com/policy/developerhub-support-policy">Red Hat Developer Support Policy</link> page.</simpara>
</important>
<simpara>There are more than 45 plugins available in Red Hat Developer Hub. See Table 5.1, "Dynamic plugins support matrix" for details.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Dynamic plugins support matrix</title>
<tgroup cols="9">
<colspec colname="col_1" colwidth="11*"/>
<colspec colname="col_2" colwidth="11*"/>
<colspec colname="col_3" colwidth="11*"/>
<colspec colname="col_4" colwidth="11*"/>
<colspec colname="col_5" colwidth="11*"/>
<colspec colname="col_6" colwidth="11*"/>
<colspec colname="col_7" colwidth="11*"/>
<colspec colname="col_8" colwidth="11*"/>
<colspec colname="col_9" colwidth="11*"/>
<thead>
<row>
<entry align="left" valign="top"><emphasis role="strong">Name</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Role</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Plugin</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Description</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Version</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Support Level</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Path</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Required Variables</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Default</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>3scale</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-3scale-backend</simpara></entry>
<entry align="left" valign="top"><simpara>The 3scale
Backstage provider plugin synchronizes the 3scale content into the
Backstage catalog.</simpara></entry>
<entry align="left" valign="top"><simpara>1.3.6</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-3scale-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>3SCALE_BASE_URL</literal></simpara>
<simpara><literal>3SCALE_ACCESS_TOKEN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>AAP</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-aap-backend</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>1.4.5</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-aap-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>AAP_BASE_URL</literal></simpara>
<simpara><literal>AAP_AUTH_TOKEN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ACR</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-acr</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>1.2.4</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-acr</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Analytics Provider Segment</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-analytics-provider-segment</simpara></entry>
<entry align="left" valign="top"><simpara>This plugin
provides an implementation of the Backstage Analytics API for Segment.
Once installed and configured, analytics events will be sent to Segment
as your users navigate and use your Backstage instance.</simpara></entry>
<entry align="left" valign="top"><simpara>1.2.0</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-analytics-provider-segment</simpara></entry>
<entry align="left" valign="top"><simpara><literal>SEGMENT_WRITE_KEY</literal></simpara>
<simpara><literal>SEGMENT_MASK_IP</literal></simpara>
<simpara><literal>SEGMENT_TEST_MODE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Argo CD</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/backstage-plugin-argo-cd</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage plugin
to view and interact with Argo CD.</simpara></entry>
<entry align="left" valign="top"><simpara>2.3.5</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Argo CD</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/backstage-plugin-argo-cd-backend</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage
plugin Argo CD backend</simpara></entry>
<entry align="left" valign="top"><simpara>2.11.3</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>ARGOCD_USERNAME</literal></simpara>
<simpara><literal>ARGOCD_PASSWORD</literal></simpara>
<simpara><literal>ARGOCD_INSTANCE1_URL</literal></simpara>
<simpara><literal>ARGOCD_AUTH_TOKEN</literal></simpara>
<simpara><literal>ARGOCD_INSTANCE2_URL</literal></simpara>
<simpara><literal>ARGOCD_AUTH_TOKEN2</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Argo CD</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/scaffolder-backend-argocd</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>1.1.17</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>ARGOCD_USERNAME</literal></simpara>
<simpara><literal>ARGOCD_PASSWORD</literal></simpara>
<simpara><literal>ARGOCD_INSTANCE1_URL</literal></simpara>
<simpara><literal>ARGOCD_AUTH_TOKEN</literal></simpara>
<simpara><literal>ARGOCD_INSTANCE2_URL</literal></simpara>
<simpara><literal>ARGOCD_AUTH_TOKEN2</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Azure Devops</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-azure-devops</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>0.3.7</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-azure-devops</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Azure Devops</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-azure-devops-backend</simpara></entry>
<entry align="left" valign="top"><simpara>Azure
DevOps backend plugin that contains the API for retrieving builds, pull
requests, etc. which is used by the Azure DevOps frontend plugin.</simpara></entry>
<entry align="left" valign="top"><simpara>0.4.3</simpara></entry>
<entry align="left" valign="top"><simpara>Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-azure-devops-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>AZURE_TOKEN</literal></simpara>
<simpara><literal>AZURE_ORG</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Datadog</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/backstage-plugin-datadog</simpara></entry>
<entry align="left" valign="top"><simpara>Embed Datadog
graphs and dashboards into Backstage.</simpara></entry>
<entry align="left" valign="top"><simpara>2.2.0</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-backstage-plugin-datadog</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Dynatrace</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-dynatrace</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin
that integrates towards Dynatrace.</simpara></entry>
<entry align="left" valign="top"><simpara>7.0.5</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-dynatrace</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Github</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-catalog-backend-module-github</simpara></entry>
<entry align="left" valign="top"><simpara>A
Backstage catalog backend module that helps integrate towards Github</simpara></entry>
<entry align="left" valign="top"><simpara>0.4.4</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>GITHUB_ORG</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Github</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-catalog-backend-module-github-org</simpara></entry>
<entry align="left" valign="top"><simpara>The github-org backend module for the catalog plugin.</simpara></entry>
<entry align="left" valign="top"><simpara>0.1.0</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-org-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>GITHUB_ORG_URL</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Github</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-github-actions</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin
that integrates towards GitHub Actions</simpara></entry>
<entry align="left" valign="top"><simpara>0.6.6</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-github-actions</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Github</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-github-issues</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin
that integrates towards GitHub Issues</simpara></entry>
<entry align="left" valign="top"><simpara>0.2.14</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-github-issues</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Github</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/backstage-plugin-github-insights</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage
plugin to provide Readmes, Top Contributors and other widgets.</simpara></entry>
<entry align="left" valign="top"><simpara>2.3.21</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-backstage-plugin-github-insights</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Github</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/backstage-plugin-github-pull-requests</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage plugin to view and interact with GitHub pull requests.</simpara></entry>
<entry align="left" valign="top"><simpara>2.5.18</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-backstage-plugin-github-pull-requests</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Github</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/backstage-plugin-security-insights</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage plugin to add security insights for GitHub repos.</simpara></entry>
<entry align="left" valign="top"><simpara>2.3.9</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-backstage-plugin-security-insights</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-catalog-backend-module-gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>Extracts repositories out of an GitLab instance.</simpara></entry>
<entry align="left" valign="top"><simpara>0.3.3</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-gitlab-dynamic</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-scaffolder-backend-module-gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>A
module for the scaffolder backend that lets you interact with gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>0.2.9</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@immobiliarelabs/backstage-plugin-gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage
plugin to interact with GitLab</simpara></entry>
<entry align="left" valign="top"><simpara>6.2.0</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Gitlab</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@immobiliarelabs/backstage-plugin-gitlab-backend</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage plugin to interact with GitLab</simpara></entry>
<entry align="left" valign="top"><simpara>6.2.0</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>GITLAB_HOST</literal></simpara>
<simpara><literal>GITLAB_TOKEN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Jenkins</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-jenkins</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin that
integrates towards Jenkins</simpara></entry>
<entry align="left" valign="top"><simpara>0.9.0</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-jenkins</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Jenkins</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-jenkins-backend</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage
backend plugin that integrates towards Jenkins</simpara></entry>
<entry align="left" valign="top"><simpara>0.3.0</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-jenkins-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>JENKINS_URL</literal></simpara>
<simpara><literal>JENKINS_USERNAME</literal></simpara>
<simpara><literal>JENKINS_TOKEN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Jfrog Artifactory</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-jfrog-artifactory</simpara></entry>
<entry align="left" valign="top"><simpara>The Jfrog Artifactory
plugin displays information about your container images within the Jfrog
Artifactory registry.</simpara></entry>
<entry align="left" valign="top"><simpara>1.2.4</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-jfrog-artifactory</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Jira</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/backstage-plugin-jira</simpara></entry>
<entry align="left" valign="top"><simpara>Backstage plugin to
view and interact with Jira</simpara></entry>
<entry align="left" valign="top"><simpara>2.4.11</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-backstage-plugin-jira</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Keycloak</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="rhdh-keycloak_admin-rhdh">@janus-idp/backstage-plugin-keycloak-backend</link></simpara></entry>
<entry align="left" valign="top"><simpara>The
Keycloak backend plugin integrates Keycloak into Backstage.</simpara></entry>
<entry align="left" valign="top"><simpara>1.7.6</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>KEYCLOAK_BASE_URL</literal></simpara>
<simpara><literal>KEYCLOAK_LOGIN_REALM</literal></simpara>
<simpara><literal>KEYCLOAK_REALM</literal></simpara>
<simpara><literal>KEYCLOAK_CLIENT_ID</literal></simpara>
<simpara><literal>KEYCLOAK_CLIENT_SECRET</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Kubernetes</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-kubernetes</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin
that integrates towards Kubernetes</simpara></entry>
<entry align="left" valign="top"><simpara>0.11.0</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-kubernetes</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Kubernetes</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-kubernetes-backend</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage
backend plugin that integrates towards Kubernetes</simpara></entry>
<entry align="left" valign="top"><simpara>0.13.0</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>K8S_CLUSTER_NAME</literal></simpara>
<simpara><literal>K8S_CLUSTER_URL</literal></simpara>
<simpara><literal>K8S_CLUSTER_TOKEN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Kubernetes</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-topology</simpara></entry>
<entry align="left" valign="top"><simpara>The
Topology plugin enables you to visualize the workloads such as
Deployment, Job, Daemonset, Statefulset, CronJob, and Pods powering any
service on the Kubernetes cluster.</simpara></entry>
<entry align="left" valign="top"><simpara>1.16.4</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-topology</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Lighthouse</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-lighthouse</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin
that integrates towards Lighthouse</simpara></entry>
<entry align="left" valign="top"><simpara>0.4.10</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-lighthouse</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Nexus Repository Manager</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-nexus-repository-manager</simpara></entry>
<entry align="left" valign="top"><simpara>The Nexus
Repository Manager plugin displays the information about your build
artifacts that are available in the Nexus Repository Manager in your
Backstage application.</simpara></entry>
<entry align="left" valign="top"><simpara>1.4.4</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-nexus-repository-manager</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OCM</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-ocm</simpara></entry>
<entry align="left" valign="top"><simpara>The Open Cluster
Management (OCM) plugin integrates your Backstage instance with the
<literal>MultiClusterHub</literal> and <literal>MultiCluster</literal> engines of OCM.</simpara></entry>
<entry align="left" valign="top"><simpara>3.5.0</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OCM</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-ocm-backend</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>3.4.6</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>OCM_HUB_NAME</literal></simpara>
<simpara><literal>OCM_HUB_URL</literal></simpara>
<simpara><literal>moc_infra_token</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pagerduty</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-pagerduty</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin
that integrates towards PagerDuty</simpara></entry>
<entry align="left" valign="top"><simpara>0.6.6</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-pagerduty</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Quay</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-quay</simpara></entry>
<entry align="left" valign="top"><simpara>The Quay plugin
displays the information about your container images within the Quay
registry in your Backstage application.</simpara></entry>
<entry align="left" valign="top"><simpara>1.4.6</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-quay</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Quay</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-scaffolder-backend-module-quay</simpara></entry>
<entry align="left" valign="top"><simpara>This module provides Backstage template actions for Quay.</simpara></entry>
<entry align="left" valign="top"><simpara>1.2.1</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-quay-dynamic</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Regex</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-scaffolder-backend-module-regex</simpara></entry>
<entry align="left" valign="top"><simpara>This plugin provides Backstage template actions for RegExp.</simpara></entry>
<entry align="left" valign="top"><simpara>1.2.1</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-regex-dynamic</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Scaffolder</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@roadiehq/scaffolder-backend-module-utils</simpara></entry>
<entry align="left" valign="top"><simpara>This
contains a collection of actions to use in scaffolder templates.</simpara></entry>
<entry align="left" valign="top"><simpara>1.10.4</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-utils-dynamic</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ServiceNow</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-scaffolder-backend-module-servicenow</simpara></entry>
<entry align="left" valign="top"><simpara>This plugin
provides Backstage template actions for ServiceNow.</simpara></entry>
<entry align="left" valign="top"><simpara>1.2.3</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-servicenow-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>SERVICENOW_BASE_URL</literal></simpara>
<simpara><literal>SERVICENOW_USERNAME</literal></simpara>
<simpara><literal>SERVICENOW_PASSWORD</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SonarQube</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-sonarqube</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin to
display SonarQube code quality and security results.</simpara></entry>
<entry align="left" valign="top"><simpara>0.7.7</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-sonarqube</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SonarQube</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-sonarqube-backend</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>0.2.8</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-sonarqube-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>SONARQUBE_URL</literal></simpara>
<simpara><literal>SONARQUBE_TOKEN</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>SonarQube</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-scaffolder-backend-module-sonarqube</simpara></entry>
<entry align="left" valign="top"><simpara>This module
provides Backstage template actions for SonarQube.</simpara></entry>
<entry align="left" valign="top"><simpara>1.2.1</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat Tech Preview</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-scaffolder-backend-module-sonarqube-dynamic</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Tech Radar</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-tech-radar</simpara></entry>
<entry align="left" valign="top"><simpara>A Backstage plugin
that lets you display a Tech Radar for your organization</simpara></entry>
<entry align="left" valign="top"><simpara>0.6.9</simpara></entry>
<entry align="left" valign="top"><simpara>Community Support</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-tech-radar</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Techdocs</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-techdocs</simpara></entry>
<entry align="left" valign="top"><simpara>The Backstage plugin
that renders technical documentation for your components</simpara></entry>
<entry align="left" valign="top"><simpara>1.8.0</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-techdocs</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Techdocs</simpara></entry>
<entry align="left" valign="top"><simpara>Backend</simpara></entry>
<entry align="left" valign="top"><simpara>@backstage/plugin-techdocs-backend</simpara></entry>
<entry align="left" valign="top"><simpara>The Backstage
backend plugin that renders technical documentation for your components</simpara></entry>
<entry align="left" valign="top"><simpara>1.8.0</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic</simpara></entry>
<entry align="left" valign="top"><simpara><literal>TECHDOCS_BUILDER_TYPE</literal></simpara>
<simpara><literal>TECHDOCS_GENERATOR_TYPE</literal></simpara>
<simpara><literal>TECHDOCS_PUBLISHER_TYPE</literal></simpara>
<simpara><literal>BUCKET_NAME</literal></simpara>
<simpara><literal>BUCKET_REGION_VAULT</literal></simpara>
<simpara><literal>BUCKET_URL</literal></simpara>
<simpara><literal>AWS_ACCESS_KEY_ID</literal></simpara>
<simpara><literal>AWS_SECRET_ACCESS_KEY</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Tekton</simpara></entry>
<entry align="left" valign="top"><simpara>Frontend</simpara></entry>
<entry align="left" valign="top"><simpara>@janus-idp/backstage-plugin-tekton</simpara></entry>
<entry align="left" valign="top"><simpara>The Tekton plugin
enables you to visualize the PipelineRun resources available on the
Kubernetes cluster.</simpara></entry>
<entry align="left" valign="top"><simpara>3.1.3</simpara></entry>
<entry align="left" valign="top"><simpara>Production</simpara></entry>
<entry align="left" valign="top"><simpara>./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Disabled</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="con-install-dynamic-plugin-helm">
<title>Installation of dynamic plugins using the Helm Chart</title>
<simpara>You can deploy a Developer Hub instance using a Helm Chart, which is a flexible installation method. With the Helm chart, you can sideload dynamic plugins into your Developer Hub instance without having to recompile your code or rebuild the container.</simpara>
<simpara>To install dynamic plugins in Developer Hub using Helm, add the following <literal>global.dynamic</literal> parameters in your Helm Chart:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>plugins</literal>: the dynamic plugins list intended for installation. By default, the list is empty. You can populate the plugins list with the following fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>package</literal>: a package specification for the dynamic plugin package that you want to install. You can use a package for either an internal or external dynamic plugin installation. For an internal installation, use from a local path to the folder containing the dynamic plugin for a local installation. For an external installation, use a or from package specification from a public NPM repository.</simpara>
</listitem>
<listitem>
<simpara><literal>integrity</literal> (required for external packages): an integrity checksum in the form of <literal>&lt;alg&gt;-&lt;digest&gt;</literal> specific to the package. Supported algorithms include <literal>sha256</literal>, <literal>sha384</literal> and <literal>sha512</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>pluginConfig</literal>: an optional plugin-specific app-config yaml fragment. See plugin configuration for more information.details.</simpara>
</listitem>
<listitem>
<simpara><literal>disabled<literal>: disables the dynamic plugin if set to `true</literal>. Default: `false</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><literal>includes</literal>: a list of YAML files utilizing the same syntax.</simpara>
</listitem>
</itemizedlist>
<simpara>[NOTE] The <literal>plugins</literal> list in the <literal>includes</literal> file is merged with the <literal>plugins</literal> list in the main Helm values. If a plugin package is mentioned in both <literal>plugins</literal> lists, the <literal>plugins</literal> fields in the main Helm values override the <literal>plugins</literal> fields in the <literal>includes</literal> file. The default configuration includes the <literal>dynamic-plugins.default.yaml</literal> file, which contains all of the dynamic plugins preinstalled in Developer Hub, whether enabled or disabled by default.</simpara>
<section xml:id="proc-obtaining-integrity-checksum">
<title>Obtaining the integrity checksum</title>
<simpara>To obtain the integrity checksum, enter the following command:</simpara>
<screen>npm view &lt;package name&gt;@&lt;version&gt; dist.integrity</screen>
</section>
<section xml:id="ref-example-dynamic-plugin-helm-installations">
<title>Example Helm chart configurations for dynamic plugin installations</title>
<simpara>The following examples demonstrate how to configure the Helm chart for specific types of dynamic plugin installations.</simpara>
<formalpara>
<title>Configuring a local plugin and an external plugin when the external plugin requires a specific app-config</title>
<para>
<programlisting language="java" linenumbering="unnumbered">global:
  dynamic:
    plugins:
      - package: &lt;alocal package-spec used by npm pack&gt;
      - package: &lt;external package-spec used by npm pack&gt;
        integrity: sha512-&lt;some hash&gt;
        pluginConfig: ...</programlisting>
</para>
</formalpara>
<formalpara>
<title>Disabling a plugin from an included file</title>
<para>
<programlisting language="java" linenumbering="unnumbered">global:
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: &lt;some imported plugins listed in dynamic-plugins.default.yaml&gt;
        disabled: true</programlisting>
</para>
</formalpara>
<formalpara>
<title>Enabling a plugin from an included file</title>
<para>
<programlisting language="java" linenumbering="unnumbered">global:
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: &lt;some imported plugins listed in dynamic-plugins.custom.yaml&gt;
        disabled: false</programlisting>
</para>
</formalpara>
<formalpara>
<title>Enabling a plugin that is disabled in an included file</title>
<para>
<programlisting language="java" linenumbering="unnumbered">global:
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: &lt;some imported plugins listed in dynamic-plugins.custom.yaml&gt;
        disabled: false</programlisting>
</para>
</formalpara>
</section>
<section xml:id="proc-install-external-dynamic-plugins-helm">
<title>Installing external dynamic plugins using a Helm chart</title>
<simpara>The NPM registry contains external dynamic plugins that you can use for demonstration purposes. For example, the following community plugins are available in the <literal>janus-idp organization</literal> in the NPMJS:
* <literal>Notifications</literal> (frontend and backend)
* <literal>kubernetes-actions</literal> (scaffolder actions)</simpara>
<simpara>To install the ‘Notifications’ and ‘kubernetes-actions’ plugins, include them in the Helm chart values in the <literal>global.dynamic.plugins</literal> list as shown in the following example:</simpara>
<screen>global:
  dynamic:
    plugins:
      - package: '@janus-idp/plugin-notifications-backend-dynamic@1.3.6'
        # Integrity can be found at https://registry.npmjs.org/@janus-idp/plugin-notifications-backend-dynamic
        integrity: 'sha512-Qd8pniy1yRx+x7LnwjzQ6k9zP+C1yex24MaCcx7dGDPT/XbTokwoSZr4baSSn8jUA6P45NUUevu1d629mG4JGQ=='
      - package: '@janus-idp/plugin-notifications@1.1.12
'
        # https://registry.npmjs.org/@janus-idp/plugin-notifications

        integrity: 'sha512-GCdEuHRQek3ay428C8C4wWgxjNpNwCXgIdFbUUFGCLLkBFSaOEw+XaBvWaBGtQ5BLgE3jQEUxa+422uzSYC5oQ=='
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-notifications:
                appIcons:
                  - name: notificationsIcon
                    module: NotificationsPlugin
                    importName: NotificationsActiveIcon
                dynamicRoutes:
                  - path: /notifications
                    importName: NotificationsPage
                    module: NotificationsPlugin
                    menuItem:
                      icon: notificationsIcon
                      text: Notifications
                    config:
                      pollingIntervalMs: 5000
      - package: '@janus-idp/backstage-scaffolder-backend-module-kubernetes-dynamic@1.3.5'
        # https://registry.npmjs.org/@janus-idp/backstage-scaffolder-backend-module-kubernetes-dynamic
        integrity: 'sha512-19ie+FM3QHxWYPyYzE0uNdI5K8M4vGZ0SPeeTw85XPROY1DrIY7rMm2G0XT85L0ZmntHVwc9qW+SbHolPg/qRA=='
          proxy:
            endpoints:
              /explore-backend-completed:
                target: 'http://localhost:7017'
      - package: '@dfatwork-pkgs/search-backend-module-explore-wrapped-dynamic@0.1.3-next.1'
        # https://registry.npmjs.org/@dfatwork-pkgs/search-backend-module-explore-wrapped-dynamic
        integrity: 'sha512-mv6LS8UOve+eumoMCVypGcd7b/L36lH2z11tGKVrt+m65VzQI4FgAJr9kNCrjUZPMyh36KVGIjYqsu9+kgzH5A=='
      - package: '@dfatwork-pkgs/plugin-catalog-backend-module-test-dynamic@0.0.0'
        # https://registry.npmjs.org/@dfatwork-pkgs/plugin-catalog-backend-module-test-dynamic
        integrity: 'sha512-YsrZMThxJk7cYJU9FtAcsTCx9lCChpytK254TfGb3iMAYQyVcZnr5AA/AU+hezFnXLsr6gj8PP7z/mCZieuuDA=='</screen>
</section>
</section>
<section xml:id="proc-rhdh-installing-external-dynamic-plugins-airgapped">
<title>Installing external plugins in an air-gapped environment</title>
<simpara>You can install external plugins in an air-gapped environment by setting up a custom NPM registry. To configure the NPM registry URL and authentication information for dynamic plugin packages, see <link linkend="proc-using-custom-npm-registry">Using a custom NPM registry for dynamic plugin packages</link>.</simpara>
</section>
<section xml:id="proc-using-custom-npm-registry">
<title>Using a custom NPM registry for dynamic plugin packages</title>
<simpara>You can configure the NPM registry URL and authentication information for dynamic plugin packages using a Helm chart. For dynamic plugin packages obtained through <literal>npm pack</literal>, you can use a <literal>.npmrc</literal> file.</simpara>
<simpara>Using the Helm chart, add the <literal>.npmrc</literal> file to the NPM registry by creating a secret named <literal>dynamic-plugins-npmrc</literal> with the following content:</simpara>
<screen>apiVersion: v1
kind: Secret
metadata:
  name: dynamic-plugins-npmrc
type: Opaque
stringData:
  .npmrc: |
    registry=&lt;registry-url&gt;
    //&lt;registry-url&gt;:_authToken=&lt;auth-token&gt;
          ...</screen>
</section>
<section xml:id="con-basic-config-dynamic-plugins">
<title>Basic configuration of dynamic plugins</title>
<simpara>Some dynamic plugins require environment variables to be set. If a mandatory environment variable is not set, and the plugin is enabled, then the application might fail at startup.</simpara>
<simpara>The mandatory environment variables for each plugin are listed in the <link linkend="rhdh-supported-plugins">Dynamic plugins support matrix</link>.</simpara>
<note>
<simpara>Zib-bomb detection
When installing some dynamic plugin containing large files, if the installation script considers the package archive to be a Zib-Bomb, the installation fails.</simpara>
<simpara>To increase the maximum permitted size of a file inside a package archive, you can increase the  <literal>MAX_ENTRY_SIZE</literal> environment value of the deployment <literal>install-dynamic-plugins initContainer</literal> from the default size of <literal>20000000</literal> bytes.</simpara>
</note>
</section>
<section xml:id="proc-viewing-installed-plugins">
<title>Viewing installed plugins</title>
<simpara>Using the Dynamic Plugins Info front-end plugin, you can view plugins that are currently installed in your Red Hat Developer Hub application. This plugin is enabled by default.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open your Developer Hub application and click <emphasis role="strong">Administration</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Go to the <emphasis role="strong">PLUGINS</emphasis> tab.</simpara>
<simpara>The <emphasis role="strong">PLUGINS</emphasis> tab contains a list of installed plugins and related information, such as <emphasis role="strong">NAME</emphasis>, <emphasis role="strong">VERSION</emphasis>, and <emphasis role="strong">ROLE</emphasis>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh/screenshot-plugin-list.png"/>
</imageobject>
<textobject><phrase>plugin-list</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
</orderedlist>
</section>
<section xml:id="rhdh-aap">
<title>Installation and configuration of Ansible Automation Platform</title>
<simpara>The Ansible Automation Platform (AAP) plugin synchronizes the accessible templates including job templates and workflow job templates from AAP into your Developer Hub catalog.</simpara>
<important>
<simpara>The Ansible Automation Platform plugin is a Technology Preview feature only.</simpara>
<simpara>Technology Preview features are not supported with Red Hat production service level agreements (SLAs), might not be functionally complete, and Red Hat does not recommend using them for production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.</simpara>
<simpara>For more information on Red Hat Technology Preview features, see <link xlink:href="https://access.redhat.com/support/offerings/techpreview/">Technology Preview Features Scope</link>.</simpara>
<simpara>Additional detail on how Red Hat provides support for bundled community dynamic plugins is available on the <link xlink:href="https://access.redhat.com/policy/developerhub-support-policy">Red Hat Developer Support Policy</link> page.</simpara>
</important>
<section xml:id="for-administrators" remap="_for-administrators">
<title>For administrators</title>
<section xml:id="installing-and-configuring-the-aap-backend-plugin" remap="_installing-and-configuring-the-aap-backend-plugin">
<title>Installing and configuring the AAP Backend plugin</title>
<simpara>The AAP backend plugin allows you to configure one or multiple providers using your <literal>app-config.yaml</literal> configuration file in Developer Hub.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your Developer Hub application is installed and running.</simpara>
</listitem>
<listitem>
<simpara>You have created an account in Ansible Automation Platform.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Installation</title>
<para>The AAP backend plugin is pre-loaded in Developer Hub with basic configuration properties. To enable it, set the <literal>disabled</literal> property to <literal>false</literal> as follows:</para>
</formalpara>
<programlisting language="yaml" linenumbering="unnumbered">global:
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-aap-backend-dynamic
        disabled: false</programlisting>
<formalpara>
<title>Basic configuration</title>
<para>To enable the AAP plugin, you must set the following environment variables:</para>
</formalpara>
<itemizedlist>
<listitem>
<simpara><literal>AAP_BASE_URL</literal>: Base URL of the service</simpara>
</listitem>
<listitem>
<simpara><literal>AAP AUTH TOKEN</literal>: Authentication token for the service</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Advanced configuration</title>
<listitem>
<simpara>You can use the <literal>aap</literal> marker to configure the <literal>app-config.yaml</literal> file of Developer Hub as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">   catalog:
     providers:
       aap:
         dev:
           baseUrl: $(AAP_BASE_URL)
           authorization: 'Bearer ${AAP_AUTH_TOKEN}'
           owner: &lt;owner&gt;
           system: &lt;system&gt;
           schedule: # optional; same options as in TaskScheduleDefinition
             # supports cron, ISO duration, "human duration" as used in code
             frequency: { minutes: 1 }
             # supports ISO duration, "human duration" as used in code
             timeout: { minutes: 1 }</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="log-lines-for-aap-backend-plugin-troubleshoot" remap="_log-lines-for-aap-backend-plugin-troubleshoot">
<title>Log lines for AAP Backend plugin troubleshoot</title>
<simpara>When you start your Developer Hub application, you can see the following log lines:</simpara>
<programlisting language="log" linenumbering="unnumbered">[1] 2023-02-13T15:26:09.356Z catalog info Discovered ResourceEntity API type=plugin target=AapResourceEntityProvider:dev
[1] 2023-02-13T15:26:09.423Z catalog info Discovered ResourceEntity Red Hat Event (DEV, v1.2.0) type=plugin target=AapResourceEntityProvider:dev
[1] 2023-02-13T15:26:09.620Z catalog info Discovered ResourceEntity Red Hat Event (TEST, v1.1.0) type=plugin target=AapResourceEntityProvider:dev
[1] 2023-02-13T15:26:09.819Z catalog info Discovered ResourceEntity Red Hat Event (PROD, v1.1.0) type=plugin target=AapResourceEntityProvider:dev
[1] 2023-02-13T15:26:09.819Z catalog info Applying the mutation with 3 entities type=plugin target=AapResourceEntityProvider:dev</programlisting>
</section>
</section>
<section xml:id="for-users" remap="_for-users">
<title>For users</title>
<section xml:id="accessing-templates-from-aap-in-developer-hub" remap="_accessing-templates-from-aap-in-developer-hub">
<title>Accessing templates from AAP in Developer Hub</title>
<simpara>When you have configured the AAP backend plugin successfully, it synchronizes the templates including job templates and workflow job templates from AAP and displays them on the Developer Hub Catalog page as Resources.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your Developer Hub application is installed and running.</simpara>
</listitem>
<listitem>
<simpara>You have installed the AAP backend plugin. For installation and configuration instructions, see <xref linkend="installing-and-configuring-the-aap-backend-plugin"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open your Developer Hub application and Go to the <emphasis role="strong">Catalog</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Resource</emphasis> from the <emphasis role="strong">Kind</emphasis> drop-down and <emphasis role="strong">job template</emphasis> or <emphasis role="strong">workflow job template</emphasis> from the <emphasis role="strong">Type</emphasis> drop-down on the left side of the page.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh-plugins-reference/aap-backend-plugin-user1.png"/>
</imageobject>
<textobject><phrase>aap-backend-plugin-backstage</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>A list of all the available templates from AAP appears on the page.</simpara>
</listitem>
<listitem>
<simpara>Select a template from the list.</simpara>
<simpara>The <emphasis role="strong">OVERVIEW</emphasis> tab appears containing different cards, such as:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">About</emphasis>: Provides detailed information about the template.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Relations</emphasis>: Displays the visual representation of the template and associated aspects.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Links</emphasis>: Contains links to the AAP dashboard and the details page of the template.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Has subcomponents</emphasis>: Displays a list of associated subcomponents.</simpara>
</listitem>
</itemizedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh-plugins-reference/aap-backend-plugin-user2.png"/>
</imageobject>
<textobject><phrase>aap-backend-plugin-backstage-details</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
</orderedlist>
</section>
</section>
</section>
<section xml:id="rhdh-keycloak_admin-rhdh">
<title>Installation and configuration of Keycloak</title>
<simpara>The Keycloak backend plugin, which integrates Keycloak into Developer Hub, has the following capabilities:</simpara>
<itemizedlist>
<listitem>
<simpara>Synchronization of Keycloak users in a realm.</simpara>
</listitem>
<listitem>
<simpara>Synchronization of Keycloak groups and their users in a realm.</simpara>
</listitem>
</itemizedlist>
<section xml:id="for-administrators-2" remap="_for-administrators-2">
<title>For administrators</title>
<section xml:id="installation" remap="_installation">
<title>Installation</title>
<simpara>The Keycloak plugin is pre-loaded in Developer Hub with basic configuration properties. To enable it, set the <literal>disabled</literal> property to <literal>false</literal> as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">global:
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic
        disabled: false</programlisting>
</section>
<section xml:id="basic-configuration" remap="_basic-configuration">
<title>Basic configuration</title>
<simpara>To enable the Keycloak plugin, you must set the following environment variables:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>KEYCLOAK_BASE_URL</literal></simpara>
</listitem>
<listitem>
<simpara><literal>KEYCLOAK_LOGIN_REALM</literal></simpara>
</listitem>
<listitem>
<simpara><literal>KEYCLOAK_REALM</literal></simpara>
</listitem>
<listitem>
<simpara><literal>KEYCLOAK_CLIENT_ID</literal></simpara>
</listitem>
<listitem>
<simpara><literal>KEYCLOAK_CLIENT_SECRET</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="advanced-configuration" remap="_advanced-configuration">
<title>Advanced configuration</title>
<formalpara>
<title>Schedule configuration</title>
<para>You can configure a schedule in the <literal>app-config.yaml</literal> file, as follows:</para>
</formalpara>
<programlisting language="yaml" linenumbering="unnumbered">     catalog:
       providers:
         keycloakOrg:
           default:
             # ...
             # highlight-add-start
             schedule: # optional; same options as in TaskScheduleDefinition
               # supports cron, ISO duration, "human duration" as used in code
               frequency: { minutes: 1 }
               # supports ISO duration, "human duration" as used in code
               timeout: { minutes: 1 }
               initialDelay: { seconds: 15 }
               # highlight-add-end</programlisting>
<note>
<simpara>If you have made any changes to the schedule in the <literal>app-config.yaml</literal> file, then restart to apply the changes.</simpara>
</note>
<formalpara>
<title>Keycloak query parameters</title>
<para>You can override the default Keycloak query parameters in the <literal>app-config.yaml</literal> file, as follows:</para>
</formalpara>
<programlisting language="yaml" linenumbering="unnumbered">   catalog:
     providers:
       keycloakOrg:
         default:
           # ...
           # highlight-add-start
           userQuerySize: 500 # Optional
           groupQuerySize: 250 # Optional
           # highlight-add-end</programlisting>
<simpara>Communication between Developer Hub and Keycloak is enabled by using the Keycloak API. Username and password, or client credentials are supported authentication methods.</simpara>
<simpara>The following table describes the parameters that you can configure to enable the plugin under <literal>catalog.providers.keycloakOrg.&lt;ENVIRONMENT_NAME&gt;</literal> object in the <literal>app-config.yaml</literal> file:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Default Value</entry>
<entry align="left" valign="top">Required</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>baseUrl</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Location of the Keycloak server, such as <literal><link xlink:href="https://localhost:8443/auth">https://localhost:8443/auth</link></literal>. Note that the newer versions of Keycloak omit the <literal>/auth</literal> context path.</simpara></entry>
<entry align="left" valign="top"><simpara>""</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>realm</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Realm to synchronize</simpara></entry>
<entry align="left" valign="top"><simpara><literal>master</literal></simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>loginRealm</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Realm used to authenticate</simpara></entry>
<entry align="left" valign="top"><simpara><literal>master</literal></simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>username</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Username to authenticate</simpara></entry>
<entry align="left" valign="top"><simpara>""</simpara></entry>
<entry align="left" valign="top"><simpara>Yes if using password based authentication</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>password</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Password to authenticate</simpara></entry>
<entry align="left" valign="top"><simpara>""</simpara></entry>
<entry align="left" valign="top"><simpara>Yes if using password based authentication</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>clientId</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Client ID to authenticate</simpara></entry>
<entry align="left" valign="top"><simpara>""</simpara></entry>
<entry align="left" valign="top"><simpara>Yes if using client credentials based authentication</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>clientSecret</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Client Secret to authenticate</simpara></entry>
<entry align="left" valign="top"><simpara>""</simpara></entry>
<entry align="left" valign="top"><simpara>Yes if using client credentials based authentication</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>userQuerySize</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Number of users to query at a time</simpara></entry>
<entry align="left" valign="top"><simpara><literal>100</literal></simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>groupQuerySize</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Number of groups to query at a time</simpara></entry>
<entry align="left" valign="top"><simpara><literal>100</literal></simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>When using client credentials, the access type must be set to <literal>confidential</literal> and service accounts must be enabled. You must also add the following roles from the <literal>realm-management</literal> client role:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>query-groups</literal></simpara>
</listitem>
<listitem>
<simpara><literal>query-users</literal></simpara>
</listitem>
<listitem>
<simpara><literal>view-users</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="limitations" remap="_limitations">
<title>Limitations</title>
<simpara>If you have self-signed or corporate certificate issues, you can set the following environment variable before starting Developer Hub:</simpara>
<simpara><literal>NODE_TLS_REJECT_UNAUTHORIZED=0</literal></simpara>
<note>
<simpara>The solution of setting the environment variable is not recommended.</simpara>
</note>
</section>
</section>
<section xml:id="for-users-2" remap="_for-users-2">
<title>For users</title>
<section xml:id="import-of-users-and-groups-in-developer-hub-using-the-keycloak-plugin" remap="_import-of-users-and-groups-in-developer-hub-using-the-keycloak-plugin">
<title>Import of users and groups in Developer Hub using the Keycloak plugin</title>
<simpara>After configuring the plugin successfully, the plugin imports the users and groups each time when started.</simpara>
<note>
<simpara>If you set up a schedule, users and groups will also be imported.</simpara>
</note>
<simpara>After the first import is complete, you can select <emphasis role="strong">User</emphasis> to list the users from the catalog page:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh-plugins-reference/users.jpg"/>
</imageobject>
<textobject><phrase>catalog-list</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>You can see the list of users on the page:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh-plugins-reference/user-list.jpg"/>
</imageobject>
<textobject><phrase>user-list</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>When you select a user, you can see the information imported from Keycloak:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh-plugins-reference/user2.jpg"/>
</imageobject>
<textobject><phrase>user-profile</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>You can also select a group, view the list, and select or view the information imported from Keycloak for a group:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh-plugins-reference/group1.jpg"/>
</imageobject>
<textobject><phrase>group-profile</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
</section>
<section xml:id="rhdh-nexus">
<title>Installation and configuration of Nexus Repository Manager</title>
<simpara>The Nexus Repository Manager plugin displays the information about your build artifacts in your Developer Hub application. The build artifacts are available in the Nexus Repository Manager.</simpara>
<important>
<simpara>The Nexus Repository Manager plugin is a Technology Preview feature only.</simpara>
<simpara>Technology Preview features are not supported with Red Hat production service level agreements (SLAs), might not be functionally complete, and Red Hat does not recommend using them for production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.</simpara>
<simpara>For more information on Red Hat Technology Preview features, see <link xlink:href="https://access.redhat.com/support/offerings/techpreview/">Technology Preview Features Scope</link>.</simpara>
<simpara>Additional detail on how Red Hat provides support for bundled community dynamic plugins is available on the <link xlink:href="https://access.redhat.com/policy/developerhub-support-policy">Red Hat Developer Support Policy</link> page.</simpara>
</important>
<section xml:id="for-administrators-3" remap="_for-administrators-3">
<title>For administrators</title>
<section xml:id="installing-and-configuring-the-nexus-repository-manager-plugin" remap="_installing-and-configuring-the-nexus-repository-manager-plugin">
<title>Installing and configuring the Nexus Repository Manager plugin</title>
<formalpara>
<title>Installation</title>
<para>The Nexus Repository Manager plugin is pre-loaded in Developer Hub with basic configuration properties. To enable it, set the disabled property to <literal>false</literal> as follows:</para>
</formalpara>
<programlisting language="yaml" linenumbering="unnumbered">global:
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-nexus-repository-manager
        disabled: false</programlisting>
<orderedlist numeration="arabic">
<title>Configuration</title>
<listitem>
<simpara>Set the proxy to the desired Nexus Repository Manager server in the <literal>app-config.yaml</literal> file as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">proxy:
    '/nexus-repository-manager':
    target: 'https://&lt;NEXUS_REPOSITORY_MANAGER_URL&gt;'
    headers:
        X-Requested-With: 'XMLHttpRequest'
        # Uncomment the following line to access a private Nexus Repository Manager using a token
        # Authorization: 'Bearer &lt;YOUR TOKEN&gt;'
    changeOrigin: true
    # Change to "false" in case of using self hosted Nexus Repository Manager instance with a self-signed certificate
    secure: true</programlisting>
</listitem>
<listitem>
<simpara>Optional: Change the base URL of Nexus Repository Manager proxy as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">nexusRepositoryManager:
    # default path is `/nexus-repository-manager`
    proxyPath: /custom-path</programlisting>
</listitem>
<listitem>
<simpara>Optional: Enable the following experimental annotations:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">nexusRepositoryManager:
    experimentalAnnotations: true</programlisting>
</listitem>
<listitem>
<simpara>Annotate your entity using the following annotations:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">metadata:
    annotations:
    # insert the chosen annotations here
    # example
    nexus-repository-manager/docker.image-name: `&lt;ORGANIZATION&gt;/&lt;REPOSITORY&gt;`,</programlisting>
</listitem>
</orderedlist>
<simpara>For additional information about installing and configuring dynamic plugins, see the <link linkend="con-rhdh-installing-dynamic-plugins_admin-rhdh">Installing dynamic plugins</link> section.</simpara>
</section>
</section>
<section xml:id="for-users-3" remap="_for-users-3">
<title>For users</title>
<section xml:id="using-the-nexus-repository-manager-plugin-in-developer-hub" remap="_using-the-nexus-repository-manager-plugin-in-developer-hub">
<title>Using the Nexus Repository Manager plugin in Developer Hub</title>
<simpara>The Nexus Repository Manager is a front-end plugin that enables you to view the information about build artifacts.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Your Developer Hub application is installed and running.</simpara>
</listitem>
<listitem>
<simpara>You have installed the Nexus Repository Manager plugin. For the installation process, see <xref linkend="installing-and-configuring-the-nexus-repository-manager-plugin"/>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open your Developer Hub application and select a component from the <emphasis role="strong">Catalog</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>Go to the <emphasis role="strong">BUILD ARTIFACTS</emphasis> tab.</simpara>
<simpara>The <emphasis role="strong">BUILD ARTIFACTS</emphasis> tab contains a list of build artifacts and related information, such as <emphasis role="strong">VERSION</emphasis>, <emphasis role="strong">REPOSITORY</emphasis>, <emphasis role="strong">REPOSITORY TYPE</emphasis>, <emphasis role="strong">MANIFEST</emphasis>, <emphasis role="strong">MODIFIED</emphasis>, and <emphasis role="strong">SIZE</emphasis>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/rhdh-plugins-reference/nexus-repository-manager.png"/>
</imageobject>
<textobject><phrase>nexus-repository-manager-tab</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
</orderedlist>
</section>
</section>
</section>
</chapter>
</book>